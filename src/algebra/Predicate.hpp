#pragma once
//---------------------------------------------------------------------------
#include "common/Types.hpp"
//---------------------------------------------------------------------------
namespace compression {
//---------------------------------------------------------------------------
namespace algebra {
//---------------------------------------------------------------------------
enum class PredicateType : u8 { EQ, INEQ, GT, LT };
//---------------------------------------------------------------------------
template <typename T> class Predicate {
public:
  //---------------------------------------------------------------------------
  /// Default constructor.
  Predicate() : type(PredicateType::EQ), value(0){};
  //---------------------------------------------------------------------------
  /// Constructor.
  Predicate(PredicateType type, T value) : type(type), value(value){};
  //---------------------------------------------------------------------------
  /// Destructor.
  ~Predicate() = default;
  //---------------------------------------------------------------------------
  /// Get this predicate's type.
  PredicateType getType() const { return type; }
  //---------------------------------------------------------------------------
  /// Get this predicate's value.
  T getValue() const { return value; }
  //---------------------------------------------------------------------------
  /// Set this predicate's value.
  void setValue(T value) { this->value = value; }

private:
  PredicateType type;
  //---------------------------------------------------------------------------
  T value;
};
//---------------------------------------------------------------------------
} // namespace algebra
//---------------------------------------------------------------------------
} // namespace compression