#include <cassert>
#include <cstring>
#include <simdcomp.h>
//---------------------------------------------------------------------------
#include "Block512BitPacking.hpp"
//---------------------------------------------------------------------------
namespace compression {
//---------------------------------------------------------------------------
namespace bitpacking {
//---------------------------------------------------------------------------
namespace simd32 {
//---------------------------------------------------------------------------
namespace avx512 {
//---------------------------------------------------------------------------

void pack(const u32 *in, __m512i *out, const u8 bit) {
  avx512packwithoutmask(in, out, bit);
}

void packmask(const u32 *in, __m512i *out, const u8 bit) {
  avx512pack(in, out, bit);
}

void unpack(const __m512i *in, u32 *out, const u8 bit) {
  avx512unpack(in, out, bit);
}

static __m512i compactify32to8(const __m512i *in) {
  __m512i shuffle_mask, in0, in1, in2, in3, lo16, hi16, packed8;
  // A mask to fix the byte layout after using packing intrinsics.
  shuffle_mask = _mm512_set_epi32(15, 11, 7, 3, // in3
                                  14, 10, 6, 2, // in2
                                  13, 9, 5, 1,  // in1
                                  12, 8, 4, 0); // in0
  // Load 64
  in0 = _mm512_loadu_si512(in);
  in1 = _mm512_loadu_si512(in + 1);
  in2 = _mm512_loadu_si512(in + 2);
  in3 = _mm512_loadu_si512(in + 3);
  // Narrow 64 32bit (2048 bit) integers to 64 8bit (512 bit) integers
  lo16 = _mm512_packs_epi32(in0, in1);
  hi16 = _mm512_packs_epi32(in2, in3);
  packed8 = _mm512_packus_epi16(lo16, hi16);
  return _mm512_permutexvar_epi32(shuffle_mask, packed8);
}

static void packblockfast1(const u32 *pin, __m512i *compressed) {
  const __m512i *in = (const __m512i *)pin;
  __m512i w0, packed8;
  //---------------------------------------------------------------------------
  w0 = _mm512_setzero_si512();
  for (u32 i = 0; i < 8; ++i) {
    packed8 = compactify32to8(in);
    // Bitpack
    w0 = _mm512_or_si512(w0, _mm512_slli_epi32(packed8, i));
    in += 4;
  }
  _mm512_storeu_si512(compressed, w0);
}

static void packblockfast2(const u32 *pin, __m512i *compressed) {
  const __m512i *in = (const __m512i *)pin;
  __m512i w0, w1, packed8;
  //---------------------------------------------------------------------------
  w0 = _mm512_setzero_si512();
  for (u32 i = 0; i < 4; ++i) {
    packed8 = compactify32to8(in);
    // Bitpack
    w0 = _mm512_or_si512(w0, _mm512_slli_epi32(packed8, 2 * i));
    in += 4;
  }
  _mm512_storeu_si512(compressed, w0);
  //---------------------------------------------------------------------------
  w1 = _mm512_setzero_si512();
  for (u32 i = 0; i < 4; ++i) {
    packed8 = compactify32to8(in);
    // Bitpack
    w1 = _mm512_or_si512(w1, _mm512_slli_epi32(packed8, 2 * i));
    in += 4;
  }
  _mm512_storeu_si512(compressed + 1, w1);
}

static void packblockfast3(const u32 *pin, __m512i *compressed) {
  const __m512i *in = (const __m512i *)pin;
  __m512i w0, w1, w2, packed8, maskr, maskl;
  //---------------------------------------------------------------------------
  w0 = _mm512_setzero_si512();
  for (u32 i = 0; i < 2; ++i) {
    packed8 = compactify32to8(in);
    // Bitpack
    w0 = _mm512_or_si512(w0, _mm512_slli_epi32(packed8, 3 * i));
    in += 4;
  }
  //---------------------------------------------------------------------------
  // Word boundary
  maskr = _mm512_set1_epi8(3);
  maskl = _mm512_set1_epi8(4);
  packed8 = compactify32to8(in);
  in += 4;
  w0 = _mm512_or_si512(w0,
                       _mm512_slli_epi32(_mm512_and_si512(maskr, packed8), 6));
  _mm512_storeu_si512(compressed, w0);
  w1 = _mm512_srli_epi32(_mm512_and_si512(maskl, packed8), 2);
  //---------------------------------------------------------------------------
  for (u32 i = 0; i < 2; ++i) {
    packed8 = compactify32to8(in);
    // Bitpack
    w1 = _mm512_or_si512(w1, _mm512_slli_epi32(packed8, 3 * i + 1));
    in += 4;
  }
  //---------------------------------------------------------------------------
  // Word boundary
  maskr = _mm512_set1_epi8(1);
  maskl = _mm512_set1_epi8(6);
  packed8 = compactify32to8(in);
  in += 4;
  w1 = _mm512_or_si512(w1,
                       _mm512_slli_epi32(_mm512_and_si512(maskr, packed8), 7));
  _mm512_storeu_si512(compressed + 1, w1);
  w2 = _mm512_srli_epi32(_mm512_and_si512(maskl, packed8), 1);
  //---------------------------------------------------------------------------
  for (u32 i = 0; i < 2; ++i) {
    packed8 = compactify32to8(in);
    // Bitpack
    w2 = _mm512_or_si512(w2, _mm512_slli_epi32(packed8, 3 * i + 2));
    in += 4;
  }
  _mm512_storeu_si512(compressed + 2, w2);
}

static void packblockfast4(const u32 *pin, __m512i *compressed) {
  const __m512i *in = (const __m512i *)pin;
  __m512i w0, w1, w2, w3, packed8;
  //---------------------------------------------------------------------------
  w0 = _mm512_setzero_si512();
  for (u32 i = 0; i < 2; ++i) {
    packed8 = compactify32to8(in);
    // Bitpack
    w0 = _mm512_or_si512(w0, _mm512_slli_epi32(packed8, 4 * i));
    in += 4;
  }
  _mm512_storeu_si512(compressed, w0);
  //---------------------------------------------------------------------------
  w1 = _mm512_setzero_si512();
  for (u32 i = 0; i < 2; ++i) {
    packed8 = compactify32to8(in);
    // Bitpack
    w1 = _mm512_or_si512(w1, _mm512_slli_epi32(packed8, 4 * i));
    in += 4;
  }
  _mm512_storeu_si512(compressed + 1, w1);
  //---------------------------------------------------------------------------
  w2 = _mm512_setzero_si512();
  for (u32 i = 0; i < 2; ++i) {
    packed8 = compactify32to8(in);
    // Bitpack
    w2 = _mm512_or_si512(w2, _mm512_slli_epi32(packed8, 4 * i));
    in += 4;
  }
  _mm512_storeu_si512(compressed + 2, w2);
  //---------------------------------------------------------------------------
  w3 = _mm512_setzero_si512();
  for (u32 i = 0; i < 2; ++i) {
    packed8 = compactify32to8(in);
    // Bitpack
    w3 = _mm512_or_si512(w3, _mm512_slli_epi32(packed8, 4 * i));
    in += 4;
  }
  _mm512_storeu_si512(compressed + 3, w3);
}

static void packblockfast5(const u32 *pin, __m512i *compressed) {
  const __m512i *in = (const __m512i *)pin;
  __m512i w0, w1, w2, w3, w4, packed8, maskr, maskl;
  //---------------------------------------------------------------------------
  w0 = _mm512_setzero_si512();
  packed8 = compactify32to8(in);
  in += 4;
  w0 = _mm512_or_si512(w0, packed8);
  //---------------------------------------------------------------------------
  // Word boundary
  maskr = _mm512_set1_epi8(7);
  maskl = _mm512_set1_epi8(24);
  packed8 = compactify32to8(in);
  in += 4;
  w0 = _mm512_or_si512(w0,
                       _mm512_slli_epi32(_mm512_and_si512(maskr, packed8), 5));
  _mm512_storeu_si512(compressed, w0);
  w1 = _mm512_srli_epi32(_mm512_and_si512(maskl, packed8), 3);
  //---------------------------------------------------------------------------
  packed8 = compactify32to8(in);
  in += 4;
  w1 = _mm512_or_si512(w1, _mm512_slli_epi32(packed8, 2));
  //---------------------------------------------------------------------------
  // Word boundary
  maskr = _mm512_set1_epi8(1);
  maskl = _mm512_set1_epi8(30);
  packed8 = compactify32to8(in);
  in += 4;
  w1 = _mm512_or_si512(w1,
                       _mm512_slli_epi32(_mm512_and_si512(maskr, packed8), 7));
  _mm512_storeu_si512(compressed + 1, w1);
  w2 = _mm512_srli_epi32(_mm512_and_si512(maskl, packed8), 1);
  //---------------------------------------------------------------------------
  // Word boundary
  maskr = _mm512_set1_epi8(15);
  maskl = _mm512_set1_epi8(16);
  packed8 = compactify32to8(in);
  in += 4;
  w2 = _mm512_or_si512(w2,
                       _mm512_slli_epi32(_mm512_and_si512(maskr, packed8), 4));
  _mm512_storeu_si512(compressed + 2, w2);
  w3 = _mm512_srli_epi32(_mm512_and_si512(maskl, packed8), 4);
  //---------------------------------------------------------------------------
  packed8 = compactify32to8(in);
  in += 4;
  w3 = _mm512_or_si512(w3, _mm512_slli_epi32(packed8, 1));
  //---------------------------------------------------------------------------
  // Word boundary
  maskr = _mm512_set1_epi8(3);
  maskl = _mm512_set1_epi8(28);
  packed8 = compactify32to8(in);
  in += 4;
  w3 = _mm512_or_si512(w3,
                       _mm512_slli_epi32(_mm512_and_si512(maskr, packed8), 6));
  _mm512_storeu_si512(compressed + 3, w3);
  w4 = _mm512_srli_epi32(_mm512_and_si512(maskl, packed8), 2);
  //---------------------------------------------------------------------------
  packed8 = compactify32to8(in);
  in += 4;
  w4 = _mm512_or_si512(w4, _mm512_slli_epi32(packed8, 3));
  _mm512_storeu_si512(compressed + 4, w4);
}

static void packblockfast6(const u32 *pin, __m512i *compressed) {
  const __m512i *in = (const __m512i *)pin;
  __m512i w0, w1, w2, packed8, maskr, maskl;
  //---------------------------------------------------------------------------
  for (u32 i = 0; i < 2; ++i) {
    w0 = _mm512_setzero_si512();
    packed8 = compactify32to8(in);
    in += 4;
    w0 = _mm512_or_si512(w0, packed8);
    //---------------------------------------------------------------------------
    // Word boundary
    maskr = _mm512_set1_epi8(3);
    maskl = _mm512_set1_epi8(60);
    packed8 = compactify32to8(in);
    in += 4;
    w0 = _mm512_or_si512(
        w0, _mm512_slli_epi32(_mm512_and_si512(maskr, packed8), 6));
    _mm512_storeu_si512(compressed + 3 * i, w0);
    w1 = _mm512_srli_epi32(_mm512_and_si512(maskl, packed8), 2);
    //---------------------------------------------------------------------------
    // Word boundary
    maskr = _mm512_set1_epi8(15);
    maskl = _mm512_set1_epi8(48);
    packed8 = compactify32to8(in);
    in += 4;
    w1 = _mm512_or_si512(
        w1, _mm512_slli_epi32(_mm512_and_si512(maskr, packed8), 4));
    _mm512_storeu_si512(compressed + 3 * i + 1, w1);
    w2 = _mm512_srli_epi32(_mm512_and_si512(maskl, packed8), 4);
    //---------------------------------------------------------------------------
    packed8 = compactify32to8(in);
    in += 4;
    w2 = _mm512_or_si512(w2, _mm512_slli_epi32(packed8, 2));
    _mm512_storeu_si512(compressed + 3 * i + 2, w2);
  }
}

static void packblockfast7(const u32 *pin, __m512i *compressed) {
  const __m512i *in = (const __m512i *)pin;
  __m512i w0, w1, w2, w3, w4, w5, w6, packed8, maskr, maskl;
  //---------------------------------------------------------------------------
  w0 = _mm512_setzero_si512();
  packed8 = compactify32to8(in);
  in += 4;
  w0 = _mm512_or_si512(w0, packed8);
  //---------------------------------------------------------------------------
  // Word boundary
  maskr = _mm512_set1_epi8(1);
  maskl = _mm512_set1_epi8(126);
  packed8 = compactify32to8(in);
  in += 4;
  w0 = _mm512_or_si512(w0,
                       _mm512_slli_epi32(_mm512_and_si512(maskr, packed8), 7));
  _mm512_storeu_si512(compressed, w0);
  w1 = _mm512_srli_epi32(_mm512_and_si512(maskl, packed8), 1);
  //---------------------------------------------------------------------------
  // Word boundary
  maskr = _mm512_set1_epi8(3);
  maskl = _mm512_set1_epi8(124);
  packed8 = compactify32to8(in);
  in += 4;
  w1 = _mm512_or_si512(w1,
                       _mm512_slli_epi32(_mm512_and_si512(maskr, packed8), 6));
  _mm512_storeu_si512(compressed + 1, w1);
  w2 = _mm512_srli_epi32(_mm512_and_si512(maskl, packed8), 2);
  //---------------------------------------------------------------------------
  // Word boundary
  maskr = _mm512_set1_epi8(7);
  maskl = _mm512_set1_epi8(120);
  packed8 = compactify32to8(in);
  in += 4;
  w2 = _mm512_or_si512(w2,
                       _mm512_slli_epi32(_mm512_and_si512(maskr, packed8), 5));
  _mm512_storeu_si512(compressed + 2, w2);
  w3 = _mm512_srli_epi32(_mm512_and_si512(maskl, packed8), 3);
  //---------------------------------------------------------------------------
  // Word boundary
  maskr = _mm512_set1_epi8(15);
  maskl = _mm512_set1_epi8(112);
  packed8 = compactify32to8(in);
  in += 4;
  w3 = _mm512_or_si512(w3,
                       _mm512_slli_epi32(_mm512_and_si512(maskr, packed8), 4));
  _mm512_storeu_si512(compressed + 3, w3);
  w4 = _mm512_srli_epi32(_mm512_and_si512(maskl, packed8), 4);
  //---------------------------------------------------------------------------
  // Word boundary
  maskr = _mm512_set1_epi8(31);
  maskl = _mm512_set1_epi8(96);
  packed8 = compactify32to8(in);
  in += 4;
  w4 = _mm512_or_si512(w4,
                       _mm512_slli_epi32(_mm512_and_si512(maskr, packed8), 3));
  _mm512_storeu_si512(compressed + 4, w4);
  w5 = _mm512_srli_epi32(_mm512_and_si512(maskl, packed8), 5);
  //---------------------------------------------------------------------------
  // Word boundary
  maskr = _mm512_set1_epi8(63);
  maskl = _mm512_set1_epi8(64);
  packed8 = compactify32to8(in);
  in += 4;
  w5 = _mm512_or_si512(w5,
                       _mm512_slli_epi32(_mm512_and_si512(maskr, packed8), 2));
  _mm512_storeu_si512(compressed + 5, w5);
  w6 = _mm512_srli_epi32(_mm512_and_si512(maskl, packed8), 6);
  //---------------------------------------------------------------------------
  packed8 = compactify32to8(in);
  in += 4;
  w6 = _mm512_or_si512(w6, _mm512_slli_epi32(packed8, 1));
  _mm512_storeu_si512(compressed + 6, w6);
}

static void packblockfast8(const u32 *pin, __m512i *compressed) {
  const __m512i *in = (const __m512i *)pin;
  __m512i packed8;
  //---------------------------------------------------------------------------
  for (u32 i = 0; i < 8; ++i) {
    packed8 = compactify32to8(in);
    _mm512_storeu_si512(compressed + i, packed8);
    in += 4;
  }
}

static void unpackblockfast1(const __m512i *compressed, u32 *pout) {
  __m512i *out = (__m512i *)pout;
  //---------------------------------------------------------------------------
  __m512i w;
  __m128i w0, w1, w2, w3;
  //---------------------------------------------------------------------------
  w = _mm512_loadu_si512(compressed);
  w0 = _mm512_extracti32x4_epi32(w, 0);
  w1 = _mm512_extracti32x4_epi32(w, 1);
  w2 = _mm512_extracti32x4_epi32(w, 2);
  w3 = _mm512_extracti32x4_epi32(w, 3);
  const __m128i mask = _mm_set1_epi8(1);
  for (u32 i = 0; i < 8; ++i) {
    _mm512_storeu_si512(out + 4 * i, _mm512_cvtepu8_epi32(_mm_and_si128(
                                         mask, _mm_srli_epi32(w0, i))));
    _mm512_storeu_si512(out + 4 * i + 1, _mm512_cvtepu8_epi32(_mm_and_si128(
                                             mask, _mm_srli_epi32(w1, i))));
    _mm512_storeu_si512(out + 4 * i + 2, _mm512_cvtepu8_epi32(_mm_and_si128(
                                             mask, _mm_srli_epi32(w2, i))));
    _mm512_storeu_si512(out + 4 * i + 3, _mm512_cvtepu8_epi32(_mm_and_si128(
                                             mask, _mm_srli_epi32(w3, i))));
  }
}

static void unpackblockfast2(const __m512i *compressed, u32 *pout) {
  __m512i *out = (__m512i *)pout;
  const __m128i mask = _mm_set1_epi8(3);
  //---------------------------------------------------------------------------
  __m512i w0, w1;
  __m128i s0, s1, s2, s3;
  //---------------------------------------------------------------------------
  w0 = _mm512_loadu_si512(compressed);
  s0 = _mm512_extracti32x4_epi32(w0, 0);
  s1 = _mm512_extracti32x4_epi32(w0, 1);
  s2 = _mm512_extracti32x4_epi32(w0, 2);
  s3 = _mm512_extracti32x4_epi32(w0, 3);
  for (u32 i = 0; i < 4; ++i) {
    _mm512_storeu_si512(out, _mm512_cvtepu8_epi32(_mm_and_si128(
                                 mask, _mm_srli_epi32(s0, 2 * i))));
    _mm512_storeu_si512(out + 1, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s1, 2 * i))));
    _mm512_storeu_si512(out + 2, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s2, 2 * i))));
    _mm512_storeu_si512(out + 3, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s3, 2 * i))));
    out += 4;
  }
  //---------------------------------------------------------------------------
  w1 = _mm512_loadu_si512(compressed + 1);
  s0 = _mm512_extracti32x4_epi32(w1, 0);
  s1 = _mm512_extracti32x4_epi32(w1, 1);
  s2 = _mm512_extracti32x4_epi32(w1, 2);
  s3 = _mm512_extracti32x4_epi32(w1, 3);
  for (u32 i = 0; i < 4; ++i) {
    _mm512_storeu_si512(out, _mm512_cvtepu8_epi32(_mm_and_si128(
                                 mask, _mm_srli_epi32(s0, 2 * i))));
    _mm512_storeu_si512(out + 1, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s1, 2 * i))));
    _mm512_storeu_si512(out + 2, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s2, 2 * i))));
    _mm512_storeu_si512(out + 3, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s3, 2 * i))));
    out += 4;
  }
}

static void unpackblockfast3(const __m512i *compressed, u32 *pout) {
  __m512i *out = (__m512i *)pout;
  const __m128i mask = _mm_set1_epi8(7);
  //---------------------------------------------------------------------------
  __m512i w0, w1, w2;
  __m128i s0, s1, s2, s3, s4, s5, s6, s7, maskr, maskl;
  //---------------------------------------------------------------------------
  w0 = _mm512_loadu_si512(compressed);
  s0 = _mm512_extracti32x4_epi32(w0, 0);
  s1 = _mm512_extracti32x4_epi32(w0, 1);
  s2 = _mm512_extracti32x4_epi32(w0, 2);
  s3 = _mm512_extracti32x4_epi32(w0, 3);
  for (u32 i = 0; i < 2; ++i) {
    _mm512_storeu_si512(out, _mm512_cvtepu8_epi32(_mm_and_si128(
                                 mask, _mm_srli_epi32(s0, 3 * i))));
    _mm512_storeu_si512(out + 1, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s1, 3 * i))));
    _mm512_storeu_si512(out + 2, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s2, 3 * i))));
    _mm512_storeu_si512(out + 3, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s3, 3 * i))));
    out += 4;
  }
  //---------------------------------------------------------------------------
  // Word Boundary
  maskr = _mm_set1_epi8(3);
  maskl = _mm_set1_epi8(4);
  w1 = _mm512_loadu_si512(compressed + 1);
  s4 = _mm512_extracti32x4_epi32(w1, 0);
  s5 = _mm512_extracti32x4_epi32(w1, 1);
  s6 = _mm512_extracti32x4_epi32(w1, 2);
  s7 = _mm512_extracti32x4_epi32(w1, 3);
  _mm512_storeu_si512(out, _mm512_cvtepu8_epi32(_mm_or_si128(
                               _mm_and_si128(maskl, _mm_slli_epi32(s4, 2)),
                               _mm_and_si128(maskr, _mm_srli_epi32(s0, 6)))));
  _mm512_storeu_si512(
      out + 1, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s5, 2)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s1, 6)))));
  _mm512_storeu_si512(
      out + 2, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s6, 2)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s2, 6)))));
  _mm512_storeu_si512(
      out + 3, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s7, 2)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s3, 6)))));
  out += 4;
  //---------------------------------------------------------------------------
  for (u32 i = 0; i < 2; ++i) {
    _mm512_storeu_si512(out, _mm512_cvtepu8_epi32(_mm_and_si128(
                                 mask, _mm_srli_epi32(s4, 3 * i + 1))));
    _mm512_storeu_si512(out + 1, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s5, 3 * i + 1))));
    _mm512_storeu_si512(out + 2, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s6, 3 * i + 1))));
    _mm512_storeu_si512(out + 3, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s7, 3 * i + 1))));
    out += 4;
  }
  //---------------------------------------------------------------------------
  // Word Boundary
  maskr = _mm_set1_epi8(1);
  maskl = _mm_set1_epi8(6);
  w2 = _mm512_loadu_si512(compressed + 2);
  s0 = _mm512_extracti32x4_epi32(w2, 0);
  s1 = _mm512_extracti32x4_epi32(w2, 1);
  s2 = _mm512_extracti32x4_epi32(w2, 2);
  s3 = _mm512_extracti32x4_epi32(w2, 3);
  _mm512_storeu_si512(out, _mm512_cvtepu8_epi32(_mm_or_si128(
                               _mm_and_si128(maskl, _mm_slli_epi32(s0, 1)),
                               _mm_and_si128(maskr, _mm_srli_epi32(s4, 7)))));
  _mm512_storeu_si512(
      out + 1, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s1, 1)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s5, 7)))));
  _mm512_storeu_si512(
      out + 2, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s2, 1)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s6, 7)))));
  _mm512_storeu_si512(
      out + 3, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s3, 1)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s7, 7)))));
  out += 4;
  //---------------------------------------------------------------------------
  for (u32 i = 0; i < 2; ++i) {
    _mm512_storeu_si512(out, _mm512_cvtepu8_epi32(_mm_and_si128(
                                 mask, _mm_srli_epi32(s0, 3 * i + 2))));
    _mm512_storeu_si512(out + 1, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s1, 3 * i + 2))));
    _mm512_storeu_si512(out + 2, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s2, 3 * i + 2))));
    _mm512_storeu_si512(out + 3, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s3, 3 * i + 2))));
    out += 4;
  }
}

static void unpackblockfast4(const __m512i *compressed, u32 *pout) {
  __m512i *out = (__m512i *)pout;
  const __m128i mask = _mm_set1_epi8(15);
  //---------------------------------------------------------------------------
  __m512i w0, w1, w2, w3;
  __m128i s0, s1, s2, s3;
  //---------------------------------------------------------------------------
  w0 = _mm512_loadu_si512(compressed);
  s0 = _mm512_extracti32x4_epi32(w0, 0);
  s1 = _mm512_extracti32x4_epi32(w0, 1);
  s2 = _mm512_extracti32x4_epi32(w0, 2);
  s3 = _mm512_extracti32x4_epi32(w0, 3);
  for (u32 i = 0; i < 2; ++i) {
    _mm512_storeu_si512(out, _mm512_cvtepu8_epi32(_mm_and_si128(
                                 mask, _mm_srli_epi32(s0, 4 * i))));
    _mm512_storeu_si512(out + 1, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s1, 4 * i))));
    _mm512_storeu_si512(out + 2, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s2, 4 * i))));
    _mm512_storeu_si512(out + 3, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s3, 4 * i))));
    out += 4;
  }
  //---------------------------------------------------------------------------
  w1 = _mm512_loadu_si512(compressed + 1);
  s0 = _mm512_extracti32x4_epi32(w1, 0);
  s1 = _mm512_extracti32x4_epi32(w1, 1);
  s2 = _mm512_extracti32x4_epi32(w1, 2);
  s3 = _mm512_extracti32x4_epi32(w1, 3);
  for (u32 i = 0; i < 2; ++i) {
    _mm512_storeu_si512(out, _mm512_cvtepu8_epi32(_mm_and_si128(
                                 mask, _mm_srli_epi32(s0, 4 * i))));
    _mm512_storeu_si512(out + 1, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s1, 4 * i))));
    _mm512_storeu_si512(out + 2, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s2, 4 * i))));
    _mm512_storeu_si512(out + 3, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s3, 4 * i))));
    out += 4;
  }
  //---------------------------------------------------------------------------
  w2 = _mm512_loadu_si512(compressed + 2);
  s0 = _mm512_extracti32x4_epi32(w2, 0);
  s1 = _mm512_extracti32x4_epi32(w2, 1);
  s2 = _mm512_extracti32x4_epi32(w2, 2);
  s3 = _mm512_extracti32x4_epi32(w2, 3);
  for (u32 i = 0; i < 2; ++i) {
    _mm512_storeu_si512(out, _mm512_cvtepu8_epi32(_mm_and_si128(
                                 mask, _mm_srli_epi32(s0, 4 * i))));
    _mm512_storeu_si512(out + 1, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s1, 4 * i))));
    _mm512_storeu_si512(out + 2, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s2, 4 * i))));
    _mm512_storeu_si512(out + 3, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s3, 4 * i))));
    out += 4;
  }
  //---------------------------------------------------------------------------
  w3 = _mm512_loadu_si512(compressed + 3);
  s0 = _mm512_extracti32x4_epi32(w3, 0);
  s1 = _mm512_extracti32x4_epi32(w3, 1);
  s2 = _mm512_extracti32x4_epi32(w3, 2);
  s3 = _mm512_extracti32x4_epi32(w3, 3);
  for (u32 i = 0; i < 2; ++i) {
    _mm512_storeu_si512(out, _mm512_cvtepu8_epi32(_mm_and_si128(
                                 mask, _mm_srli_epi32(s0, 4 * i))));
    _mm512_storeu_si512(out + 1, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s1, 4 * i))));
    _mm512_storeu_si512(out + 2, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s2, 4 * i))));
    _mm512_storeu_si512(out + 3, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s3, 4 * i))));
    out += 4;
  }
}

static void unpackblockfast5(const __m512i *compressed, u32 *pout) {
  __m512i *out = (__m512i *)pout;
  const __m128i mask = _mm_set1_epi8(31);
  //---------------------------------------------------------------------------
  __m512i w0, w1, w2, w3, w4;
  __m128i s0, s1, s2, s3, s4, s5, s6, s7, maskr, maskl;
  //---------------------------------------------------------------------------
  w0 = _mm512_loadu_si512(compressed);
  s0 = _mm512_extracti32x4_epi32(w0, 0);
  s1 = _mm512_extracti32x4_epi32(w0, 1);
  s2 = _mm512_extracti32x4_epi32(w0, 2);
  s3 = _mm512_extracti32x4_epi32(w0, 3);
  _mm512_storeu_si512(out, _mm512_cvtepu8_epi32(_mm_and_si128(mask, s0)));
  _mm512_storeu_si512(out + 1, _mm512_cvtepu8_epi32(_mm_and_si128(mask, s1)));
  _mm512_storeu_si512(out + 2, _mm512_cvtepu8_epi32(_mm_and_si128(mask, s2)));
  _mm512_storeu_si512(out + 3, _mm512_cvtepu8_epi32(_mm_and_si128(mask, s3)));
  out += 4;
  //---------------------------------------------------------------------------
  // Word Boundary
  maskr = _mm_set1_epi8(7);
  maskl = _mm_set1_epi8(24);
  w1 = _mm512_loadu_si512(compressed + 1);
  s4 = _mm512_extracti32x4_epi32(w1, 0);
  s5 = _mm512_extracti32x4_epi32(w1, 1);
  s6 = _mm512_extracti32x4_epi32(w1, 2);
  s7 = _mm512_extracti32x4_epi32(w1, 3);
  _mm512_storeu_si512(out, _mm512_cvtepu8_epi32(_mm_or_si128(
                               _mm_and_si128(maskl, _mm_slli_epi32(s4, 3)),
                               _mm_and_si128(maskr, _mm_srli_epi32(s0, 5)))));
  _mm512_storeu_si512(
      out + 1, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s5, 3)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s1, 5)))));
  _mm512_storeu_si512(
      out + 2, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s6, 3)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s2, 5)))));
  _mm512_storeu_si512(
      out + 3, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s7, 3)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s3, 5)))));
  out += 4;
  //---------------------------------------------------------------------------
  _mm512_storeu_si512(
      out, _mm512_cvtepu8_epi32(_mm_and_si128(mask, _mm_srli_epi32(s4, 2))));
  _mm512_storeu_si512(out + 1, _mm512_cvtepu8_epi32(
                                   _mm_and_si128(mask, _mm_srli_epi32(s5, 2))));
  _mm512_storeu_si512(out + 2, _mm512_cvtepu8_epi32(
                                   _mm_and_si128(mask, _mm_srli_epi32(s6, 2))));
  _mm512_storeu_si512(out + 3, _mm512_cvtepu8_epi32(
                                   _mm_and_si128(mask, _mm_srli_epi32(s7, 2))));
  out += 4;
  //---------------------------------------------------------------------------
  // Word Boundary
  maskr = _mm_set1_epi8(1);
  maskl = _mm_set1_epi8(30);
  w2 = _mm512_loadu_si512(compressed + 2);
  s0 = _mm512_extracti32x4_epi32(w2, 0);
  s1 = _mm512_extracti32x4_epi32(w2, 1);
  s2 = _mm512_extracti32x4_epi32(w2, 2);
  s3 = _mm512_extracti32x4_epi32(w2, 3);
  _mm512_storeu_si512(out, _mm512_cvtepu8_epi32(_mm_or_si128(
                               _mm_and_si128(maskl, _mm_slli_epi32(s0, 1)),
                               _mm_and_si128(maskr, _mm_srli_epi32(s4, 7)))));
  _mm512_storeu_si512(
      out + 1, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s1, 1)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s5, 7)))));
  _mm512_storeu_si512(
      out + 2, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s2, 1)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s6, 7)))));
  _mm512_storeu_si512(
      out + 3, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s3, 1)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s7, 7)))));
  out += 4;
  //---------------------------------------------------------------------------
  // Word Boundary
  maskr = _mm_set1_epi8(15);
  maskl = _mm_set1_epi8(16);
  w3 = _mm512_loadu_si512(compressed + 3);
  s4 = _mm512_extracti32x4_epi32(w3, 0);
  s5 = _mm512_extracti32x4_epi32(w3, 1);
  s6 = _mm512_extracti32x4_epi32(w3, 2);
  s7 = _mm512_extracti32x4_epi32(w3, 3);
  _mm512_storeu_si512(out, _mm512_cvtepu8_epi32(_mm_or_si128(
                               _mm_and_si128(maskl, _mm_slli_epi32(s4, 4)),
                               _mm_and_si128(maskr, _mm_srli_epi32(s0, 4)))));
  _mm512_storeu_si512(
      out + 1, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s5, 4)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s1, 4)))));
  _mm512_storeu_si512(
      out + 2, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s6, 4)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s2, 4)))));
  _mm512_storeu_si512(
      out + 3, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s7, 4)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s3, 4)))));
  out += 4;
  //---------------------------------------------------------------------------
  _mm512_storeu_si512(
      out, _mm512_cvtepu8_epi32(_mm_and_si128(mask, _mm_srli_epi32(s4, 1))));
  _mm512_storeu_si512(out + 1, _mm512_cvtepu8_epi32(
                                   _mm_and_si128(mask, _mm_srli_epi32(s5, 1))));
  _mm512_storeu_si512(out + 2, _mm512_cvtepu8_epi32(
                                   _mm_and_si128(mask, _mm_srli_epi32(s6, 1))));
  _mm512_storeu_si512(out + 3, _mm512_cvtepu8_epi32(
                                   _mm_and_si128(mask, _mm_srli_epi32(s7, 1))));
  out += 4;
  //---------------------------------------------------------------------------
  // Word Boundary
  maskr = _mm_set1_epi8(3);
  maskl = _mm_set1_epi8(28);
  w4 = _mm512_loadu_si512(compressed + 4);
  s0 = _mm512_extracti32x4_epi32(w4, 0);
  s1 = _mm512_extracti32x4_epi32(w4, 1);
  s2 = _mm512_extracti32x4_epi32(w4, 2);
  s3 = _mm512_extracti32x4_epi32(w4, 3);
  _mm512_storeu_si512(out, _mm512_cvtepu8_epi32(_mm_or_si128(
                               _mm_and_si128(maskl, _mm_slli_epi32(s0, 2)),
                               _mm_and_si128(maskr, _mm_srli_epi32(s4, 6)))));
  _mm512_storeu_si512(
      out + 1, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s1, 2)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s5, 6)))));
  _mm512_storeu_si512(
      out + 2, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s2, 2)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s6, 6)))));
  _mm512_storeu_si512(
      out + 3, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s3, 2)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s7, 6)))));
  out += 4;
  //---------------------------------------------------------------------------
  _mm512_storeu_si512(
      out, _mm512_cvtepu8_epi32(_mm_and_si128(mask, _mm_srli_epi32(s0, 3))));
  _mm512_storeu_si512(out + 1, _mm512_cvtepu8_epi32(
                                   _mm_and_si128(mask, _mm_srli_epi32(s1, 3))));
  _mm512_storeu_si512(out + 2, _mm512_cvtepu8_epi32(
                                   _mm_and_si128(mask, _mm_srli_epi32(s2, 3))));
  _mm512_storeu_si512(out + 3, _mm512_cvtepu8_epi32(
                                   _mm_and_si128(mask, _mm_srli_epi32(s3, 3))));
  out += 4;
}

static void unpackblockfast6(const __m512i *compressed, u32 *pout) {
  __m512i *out = (__m512i *)pout;
  const __m128i mask = _mm_set1_epi8(63);
  //---------------------------------------------------------------------------
  __m512i w0, w1, w2;
  __m128i s0, s1, s2, s3, s4, s5, s6, s7, maskr, maskl;
  //---------------------------------------------------------------------------
  for (u32 i = 0; i < 2; ++i) {
    w0 = _mm512_loadu_si512(compressed + 3 * i);
    s0 = _mm512_extracti32x4_epi32(w0, 0);
    s1 = _mm512_extracti32x4_epi32(w0, 1);
    s2 = _mm512_extracti32x4_epi32(w0, 2);
    s3 = _mm512_extracti32x4_epi32(w0, 3);
    _mm512_storeu_si512(out, _mm512_cvtepu8_epi32(_mm_and_si128(mask, s0)));
    _mm512_storeu_si512(out + 1, _mm512_cvtepu8_epi32(_mm_and_si128(mask, s1)));
    _mm512_storeu_si512(out + 2, _mm512_cvtepu8_epi32(_mm_and_si128(mask, s2)));
    _mm512_storeu_si512(out + 3, _mm512_cvtepu8_epi32(_mm_and_si128(mask, s3)));
    out += 4;
    //---------------------------------------------------------------------------
    // Word Boundary
    maskr = _mm_set1_epi8(3);
    maskl = _mm_set1_epi8(60);
    w1 = _mm512_loadu_si512(compressed + 3 * i + 1);
    s4 = _mm512_extracti32x4_epi32(w1, 0);
    s5 = _mm512_extracti32x4_epi32(w1, 1);
    s6 = _mm512_extracti32x4_epi32(w1, 2);
    s7 = _mm512_extracti32x4_epi32(w1, 3);
    _mm512_storeu_si512(out, _mm512_cvtepu8_epi32(_mm_or_si128(
                                 _mm_and_si128(maskl, _mm_slli_epi32(s4, 2)),
                                 _mm_and_si128(maskr, _mm_srli_epi32(s0, 6)))));
    _mm512_storeu_si512(out + 1,
                        _mm512_cvtepu8_epi32(_mm_or_si128(
                            _mm_and_si128(maskl, _mm_slli_epi32(s5, 2)),
                            _mm_and_si128(maskr, _mm_srli_epi32(s1, 6)))));
    _mm512_storeu_si512(out + 2,
                        _mm512_cvtepu8_epi32(_mm_or_si128(
                            _mm_and_si128(maskl, _mm_slli_epi32(s6, 2)),
                            _mm_and_si128(maskr, _mm_srli_epi32(s2, 6)))));
    _mm512_storeu_si512(out + 3,
                        _mm512_cvtepu8_epi32(_mm_or_si128(
                            _mm_and_si128(maskl, _mm_slli_epi32(s7, 2)),
                            _mm_and_si128(maskr, _mm_srli_epi32(s3, 6)))));
    out += 4;
    //---------------------------------------------------------------------------
    // Word Boundary
    maskr = _mm_set1_epi8(15);
    maskl = _mm_set1_epi8(48);
    w2 = _mm512_loadu_si512(compressed + 3 * i + 2);
    s0 = _mm512_extracti32x4_epi32(w2, 0);
    s1 = _mm512_extracti32x4_epi32(w2, 1);
    s2 = _mm512_extracti32x4_epi32(w2, 2);
    s3 = _mm512_extracti32x4_epi32(w2, 3);
    _mm512_storeu_si512(out, _mm512_cvtepu8_epi32(_mm_or_si128(
                                 _mm_and_si128(maskl, _mm_slli_epi32(s0, 4)),
                                 _mm_and_si128(maskr, _mm_srli_epi32(s4, 4)))));
    _mm512_storeu_si512(out + 1,
                        _mm512_cvtepu8_epi32(_mm_or_si128(
                            _mm_and_si128(maskl, _mm_slli_epi32(s1, 4)),
                            _mm_and_si128(maskr, _mm_srli_epi32(s5, 4)))));
    _mm512_storeu_si512(out + 2,
                        _mm512_cvtepu8_epi32(_mm_or_si128(
                            _mm_and_si128(maskl, _mm_slli_epi32(s2, 4)),
                            _mm_and_si128(maskr, _mm_srli_epi32(s6, 4)))));
    _mm512_storeu_si512(out + 3,
                        _mm512_cvtepu8_epi32(_mm_or_si128(
                            _mm_and_si128(maskl, _mm_slli_epi32(s3, 4)),
                            _mm_and_si128(maskr, _mm_srli_epi32(s7, 4)))));
    out += 4;
    //---------------------------------------------------------------------------
    _mm512_storeu_si512(
        out, _mm512_cvtepu8_epi32(_mm_and_si128(mask, _mm_srli_epi32(s0, 2))));
    _mm512_storeu_si512(out + 1, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s1, 2))));
    _mm512_storeu_si512(out + 2, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s2, 2))));
    _mm512_storeu_si512(out + 3, _mm512_cvtepu8_epi32(_mm_and_si128(
                                     mask, _mm_srli_epi32(s3, 2))));
    out += 4;
  }
}

static void unpackblockfast7(const __m512i *compressed, u32 *pout) {
  __m512i *out = (__m512i *)pout;
  const __m128i mask = _mm_set1_epi8(127);
  //---------------------------------------------------------------------------
  __m512i w0, w1, w2, w3, w4, w5, w6;
  __m128i s0, s1, s2, s3, s4, s5, s6, s7, maskr, maskl;
  //---------------------------------------------------------------------------
  w0 = _mm512_loadu_si512(compressed);
  s0 = _mm512_extracti32x4_epi32(w0, 0);
  s1 = _mm512_extracti32x4_epi32(w0, 1);
  s2 = _mm512_extracti32x4_epi32(w0, 2);
  s3 = _mm512_extracti32x4_epi32(w0, 3);
  _mm512_storeu_si512(out, _mm512_cvtepu8_epi32(_mm_and_si128(mask, s0)));
  _mm512_storeu_si512(out + 1, _mm512_cvtepu8_epi32(_mm_and_si128(mask, s1)));
  _mm512_storeu_si512(out + 2, _mm512_cvtepu8_epi32(_mm_and_si128(mask, s2)));
  _mm512_storeu_si512(out + 3, _mm512_cvtepu8_epi32(_mm_and_si128(mask, s3)));
  out += 4;
  //---------------------------------------------------------------------------
  // Word Boundary
  maskr = _mm_set1_epi8(1);
  maskl = _mm_set1_epi8(126);
  w1 = _mm512_loadu_si512(compressed + 1);
  s4 = _mm512_extracti32x4_epi32(w1, 0);
  s5 = _mm512_extracti32x4_epi32(w1, 1);
  s6 = _mm512_extracti32x4_epi32(w1, 2);
  s7 = _mm512_extracti32x4_epi32(w1, 3);
  _mm512_storeu_si512(out, _mm512_cvtepu8_epi32(_mm_or_si128(
                               _mm_and_si128(maskl, _mm_slli_epi32(s4, 1)),
                               _mm_and_si128(maskr, _mm_srli_epi32(s0, 7)))));
  _mm512_storeu_si512(
      out + 1, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s5, 1)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s1, 7)))));
  _mm512_storeu_si512(
      out + 2, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s6, 1)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s2, 7)))));
  _mm512_storeu_si512(
      out + 3, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s7, 1)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s3, 7)))));
  out += 4;
  //---------------------------------------------------------------------------
  // Word Boundary
  maskr = _mm_set1_epi8(3);
  maskl = _mm_set1_epi8(124);
  w2 = _mm512_loadu_si512(compressed + 2);
  s0 = _mm512_extracti32x4_epi32(w2, 0);
  s1 = _mm512_extracti32x4_epi32(w2, 1);
  s2 = _mm512_extracti32x4_epi32(w2, 2);
  s3 = _mm512_extracti32x4_epi32(w2, 3);
  _mm512_storeu_si512(out, _mm512_cvtepu8_epi32(_mm_or_si128(
                               _mm_and_si128(maskl, _mm_slli_epi32(s0, 2)),
                               _mm_and_si128(maskr, _mm_srli_epi32(s4, 6)))));
  _mm512_storeu_si512(
      out + 1, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s1, 2)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s5, 6)))));
  _mm512_storeu_si512(
      out + 2, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s2, 2)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s6, 6)))));
  _mm512_storeu_si512(
      out + 3, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s3, 2)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s7, 6)))));
  out += 4;
  //---------------------------------------------------------------------------
  // Word Boundary
  maskr = _mm_set1_epi8(7);
  maskl = _mm_set1_epi8(120);
  w3 = _mm512_loadu_si512(compressed + 3);
  s4 = _mm512_extracti32x4_epi32(w3, 0);
  s5 = _mm512_extracti32x4_epi32(w3, 1);
  s6 = _mm512_extracti32x4_epi32(w3, 2);
  s7 = _mm512_extracti32x4_epi32(w3, 3);
  _mm512_storeu_si512(out, _mm512_cvtepu8_epi32(_mm_or_si128(
                               _mm_and_si128(maskl, _mm_slli_epi32(s4, 3)),
                               _mm_and_si128(maskr, _mm_srli_epi32(s0, 5)))));
  _mm512_storeu_si512(
      out + 1, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s5, 3)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s1, 5)))));
  _mm512_storeu_si512(
      out + 2, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s6, 3)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s2, 5)))));
  _mm512_storeu_si512(
      out + 3, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s7, 3)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s3, 5)))));
  out += 4;
  //---------------------------------------------------------------------------
  // Word Boundary
  maskr = _mm_set1_epi8(15);
  maskl = _mm_set1_epi8(112);
  w4 = _mm512_loadu_si512(compressed + 4);
  s0 = _mm512_extracti32x4_epi32(w4, 0);
  s1 = _mm512_extracti32x4_epi32(w4, 1);
  s2 = _mm512_extracti32x4_epi32(w4, 2);
  s3 = _mm512_extracti32x4_epi32(w4, 3);
  _mm512_storeu_si512(out, _mm512_cvtepu8_epi32(_mm_or_si128(
                               _mm_and_si128(maskl, _mm_slli_epi32(s0, 4)),
                               _mm_and_si128(maskr, _mm_srli_epi32(s4, 4)))));
  _mm512_storeu_si512(
      out + 1, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s1, 4)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s5, 4)))));
  _mm512_storeu_si512(
      out + 2, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s2, 4)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s6, 4)))));
  _mm512_storeu_si512(
      out + 3, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s3, 4)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s7, 4)))));
  out += 4;
  //---------------------------------------------------------------------------
  // Word Boundary
  maskr = _mm_set1_epi8(31);
  maskl = _mm_set1_epi8(96);
  w5 = _mm512_loadu_si512(compressed + 5);
  s4 = _mm512_extracti32x4_epi32(w5, 0);
  s5 = _mm512_extracti32x4_epi32(w5, 1);
  s6 = _mm512_extracti32x4_epi32(w5, 2);
  s7 = _mm512_extracti32x4_epi32(w5, 3);
  _mm512_storeu_si512(out, _mm512_cvtepu8_epi32(_mm_or_si128(
                               _mm_and_si128(maskl, _mm_slli_epi32(s4, 5)),
                               _mm_and_si128(maskr, _mm_srli_epi32(s0, 3)))));
  _mm512_storeu_si512(
      out + 1, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s5, 5)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s1, 3)))));
  _mm512_storeu_si512(
      out + 2, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s6, 5)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s2, 3)))));
  _mm512_storeu_si512(
      out + 3, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s7, 5)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s3, 3)))));
  out += 4;
  //---------------------------------------------------------------------------
  // Word Boundary
  maskr = _mm_set1_epi8(63);
  maskl = _mm_set1_epi8(64);
  w6 = _mm512_loadu_si512(compressed + 6);
  s0 = _mm512_extracti32x4_epi32(w6, 0);
  s1 = _mm512_extracti32x4_epi32(w6, 1);
  s2 = _mm512_extracti32x4_epi32(w6, 2);
  s3 = _mm512_extracti32x4_epi32(w6, 3);
  _mm512_storeu_si512(out, _mm512_cvtepu8_epi32(_mm_or_si128(
                               _mm_and_si128(maskl, _mm_slli_epi32(s0, 6)),
                               _mm_and_si128(maskr, _mm_srli_epi32(s4, 2)))));
  _mm512_storeu_si512(
      out + 1, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s1, 6)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s5, 2)))));
  _mm512_storeu_si512(
      out + 2, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s2, 6)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s6, 2)))));
  _mm512_storeu_si512(
      out + 3, _mm512_cvtepu8_epi32(
                   _mm_or_si128(_mm_and_si128(maskl, _mm_slli_epi32(s3, 6)),
                                _mm_and_si128(maskr, _mm_srli_epi32(s7, 2)))));
  out += 4;
  //---------------------------------------------------------------------------
  _mm512_storeu_si512(
      out, _mm512_cvtepu8_epi32(_mm_and_si128(mask, _mm_srli_epi32(s0, 1))));
  _mm512_storeu_si512(out + 1, _mm512_cvtepu8_epi32(
                                   _mm_and_si128(mask, _mm_srli_epi32(s1, 1))));
  _mm512_storeu_si512(out + 2, _mm512_cvtepu8_epi32(
                                   _mm_and_si128(mask, _mm_srli_epi32(s2, 1))));
  _mm512_storeu_si512(out + 3, _mm512_cvtepu8_epi32(
                                   _mm_and_si128(mask, _mm_srli_epi32(s3, 1))));
  out += 4;
}

static void unpackblockfast8(const __m512i *compressed, u32 *pout) {
  __m512i *out = (__m512i *)pout;
  __m512i w;
  __m128i w0, w1, w2, w3;
  //---------------------------------------------------------------------------
  for (u32 i = 0; i < 8; ++i) {
    w = _mm512_loadu_si512(compressed + i);
    w0 = _mm512_extracti32x4_epi32(w, 0);
    w1 = _mm512_extracti32x4_epi32(w, 1);
    w2 = _mm512_extracti32x4_epi32(w, 2);
    w3 = _mm512_extracti32x4_epi32(w, 3);
    _mm512_storeu_si512(out + 4 * i, _mm512_cvtepu8_epi32(w0));
    _mm512_storeu_si512(out + 4 * i + 1, _mm512_cvtepu8_epi32(w1));
    _mm512_storeu_si512(out + 4 * i + 2, _mm512_cvtepu8_epi32(w2));
    _mm512_storeu_si512(out + 4 * i + 3, _mm512_cvtepu8_epi32(w3));
  }
}

void packfast(const u32 *in, __m512i *out, const u8 bit) {
  switch (bit) {
  case 1:
    packblockfast1(in, out);
    break;
  case 2:
    packblockfast2(in, out);
    break;
  case 3:
    packblockfast3(in, out);
    break;
  case 4:
    packblockfast4(in, out);
    break;
  case 5:
    packblockfast5(in, out);
    break;
  case 6:
    packblockfast6(in, out);
    break;
  case 7:
    packblockfast7(in, out);
    break;
  case 8:
    packblockfast8(in, out);
    break;
  default:
    assert(false);
  }
}

void unpackfast(const __m512i *in, u32 *out, const u8 bit) {
  switch (bit) {
  case 1:
    unpackblockfast1(in, out);
    break;
  case 2:
    unpackblockfast2(in, out);
    break;
  case 3:
    unpackblockfast3(in, out);
    break;
  case 4:
    unpackblockfast4(in, out);
    break;
  case 5:
    unpackblockfast5(in, out);
    break;
  case 6:
    unpackblockfast6(in, out);
    break;
  case 7:
    unpackblockfast7(in, out);
    break;
  case 8:
    unpackblockfast8(in, out);
    break;
  default:
    assert(false);
  }
}

static void filtereq0(const __m512i *in, u32 *matches, const INTEGER comp) {
  if (comp == 0)
    memset(matches, 1, 512 * sizeof(*matches));
  else
    memset(matches, 0, 512 * sizeof(*matches));
}

/* we packed 512 1-bit values, touching 1 512-bit words, using 64 bytes */
static void filterfasteq1(const __m512i *in, u8 *matches, const INTEGER comp) {
  assert(comp < 2);
  //---------------------------------------------------------------------------
  __m512i w0;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi8(1);
  const __m512i broadcomp = _mm512_set1_epi8(comp);
  //---------------------------------------------------------------------------
  w0 = _mm512_loadu_si512(in);
  for (u32 i = 0; i < 8; ++i) {
    _mm512_storeu_si512(
        out + i,
        _mm512_maskz_set1_epi8(
            _mm512_cmpeq_epi8_mask(
                _mm512_and_si512(mask, _mm512_srli_epi32(w0, i)), broadcomp),
            0xFF));
  }
}

/* we packed 512 1-bit values, touching 1 512-bit words, using 64 bytes */
static void filtereq1(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  1 512-bit word */
  __m512i w0;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(1);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 1)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 3)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 9)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 13)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 17)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 19)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 21)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 22)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 23)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 24)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 25)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 26)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 27)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 28)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 29)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 30)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 31), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 2-bit values, touching 2 512-bit words, using 128 bytes */
static void filtereq2(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  2 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(3);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 22)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 24)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 26)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 28)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 30), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 18)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 22)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 24)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 26)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 28)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 30), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 3-bit values, touching 3 512-bit words, using 192 bytes */
static void filtereq3(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  3 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(7);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 3)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 9)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 21)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 24)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 27)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 7)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 13)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 19)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 22)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 25)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 28)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 17)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 23)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 26)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 29), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 4-bit values, touching 4 512-bit words, using 256 bytes */
static void filtereq4(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  4 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(15);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 24)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 7, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_srli_epi32(w0, 28), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w1), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 24)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 28), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 24)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 28), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 24)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 28), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 5-bit values, touching 5 512-bit words, using 320 bytes */
static void filtereq5(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  5 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(31);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 25)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 13)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 18)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 23)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 1)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 21)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 26)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 31),
                                                     _mm512_slli_epi32(w1, 1))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 19)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 24)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                     _mm512_slli_epi32(w0, 3))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 17)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 22)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 27), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 6-bit values, touching 6 512-bit words, using 384 bytes */
static void filtereq6(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  6 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(63);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 24)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 22)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 26), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 18)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 24)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 22)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 26), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 7-bit values, touching 7 512-bit words, using 448 bytes */
static void filtereq7(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  7 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(127);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 21)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 17)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 24)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 13)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 23)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 19)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 15)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 22)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                     _mm512_slli_epi32(w0, 3))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 25), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 8-bit values, touching 8 512-bit words, using 512 bytes */
static void filtereq8(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  8 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(255);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 3, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_srli_epi32(w0, 24), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(out + 4, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w1), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 7, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_srli_epi32(w1, 24), broadcomp),
                                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 11, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 24), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(out + 12, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 24), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 19, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 24), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(out + 20, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 24), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 27, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 24), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(out + 28, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 24), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 9-bit values, touching 9 512-bit words, using 576 bytes */
static void filtereq9(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  9 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(511);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 9)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 13)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 22)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 17)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 21)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                     _mm512_slli_epi32(w1, 7))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 11)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                     _mm512_slli_epi32(w0, 3))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 19)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 23), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 10-bit values, touching 10 512-bit words, using 640 bytes */
static void filtereq10(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  10 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(1023);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 18)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 22), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 22), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 11-bit values, touching 11 512-bit words, using 704 bytes */
static void filtereq11(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  11 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(2047);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 2, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                 _mm512_slli_epi32(w1, 10))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                     _mm512_slli_epi32(w0, 9))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 13)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 25),
                                                     _mm512_slli_epi32(w0, 7))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 5)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 27),
                                                     _mm512_slli_epi32(w0, 5))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 17)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 7)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 18)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                     _mm512_slli_epi32(w0, 3))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 19)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 21), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 12-bit values, touching 12 512-bit words, using 768 bytes */
static void filtereq12(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  12 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(4095);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 7, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_srli_epi32(w0, 20), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w1), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 20), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 20), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 20), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 13-bit values, touching 13 512-bit words, using 832 bytes */
static void filtereq13(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  13 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(8191);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 13)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 7)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 4, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                 _mm512_slli_epi32(w0, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 1)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 9, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 21),
                                                 _mm512_slli_epi32(w0, 11))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                  _mm512_slli_epi32(w0, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 3)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 29),
                                                     _mm512_slli_epi32(w1, 3))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                     _mm512_slli_epi32(w0, 9))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 17)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 11)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 31),
                                                     _mm512_slli_epi32(w1, 1))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 25),
                                                     _mm512_slli_epi32(w0, 7))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 19), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 14-bit values, touching 14 512-bit words, using 896 bytes */
static void filtereq14(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  14 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(16383);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                 _mm512_slli_epi32(w1, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 13, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                  _mm512_slli_epi32(w0, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 18), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                  _mm512_slli_epi32(w1, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 18), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 15-bit values, touching 15 512-bit words, using 960 bytes */
static void filtereq15(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  15 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(32767);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 13)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 10, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                  _mm512_slli_epi32(w1, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 5)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 12, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 3)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                  _mm512_slli_epi32(w1, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 29),
                                                     _mm512_slli_epi32(w1, 3))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 27),
                                                     _mm512_slli_epi32(w0, 5))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                     _mm512_slli_epi32(w1, 7))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                     _mm512_slli_epi32(w0, 9))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 27, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                  _mm512_slli_epi32(w1, 11))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 19),
                                                  _mm512_slli_epi32(w0, 13))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 17), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 16-bit values, touching 16 512-bit words, using 1024 bytes */
static void filtereq16(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  16 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(65535);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(out + 1, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_srli_epi32(w0, 16), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(out + 2, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w1), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(out + 3, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_srli_epi32(w1, 16), broadcomp),
                                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(out + 4, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(out + 5, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_srli_epi32(w0, 16), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(out + 6, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w1), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(out + 7, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_srli_epi32(w1, 16), broadcomp),
                                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(out + 9, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_srli_epi32(w0, 16), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(out + 10, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 11, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 16), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(out + 12, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 13, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 16), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(out + 14, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 16), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 17, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 16), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(out + 18, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 19, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 16), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(out + 20, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 21, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 16), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(out + 22, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 16), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 25, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 16), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(out + 26, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 27, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 16), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(out + 28, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 29, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 16), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(out + 30, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 16), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 17-bit values, touching 17 512-bit words, using 1088 bytes */
static void filtereq17(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  17 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(131071);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                 _mm512_slli_epi32(w1, 15))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 3, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 19),
                                                 _mm512_slli_epi32(w0, 13))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 5, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                 _mm512_slli_epi32(w1, 11))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                     _mm512_slli_epi32(w0, 9))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                     _mm512_slli_epi32(w1, 7))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 27),
                                                     _mm512_slli_epi32(w0, 5))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 29),
                                                     _mm512_slli_epi32(w1, 3))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                  _mm512_slli_epi32(w0, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 3)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 5)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                  _mm512_slli_epi32(w0, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 13)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 15), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 18-bit values, touching 18 512-bit words, using 1152 bytes */
static void filtereq18(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  18 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(262143);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                 _mm512_slli_epi32(w1, 14))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 3, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                 _mm512_slli_epi32(w0, 10))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 8, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                 _mm512_slli_epi32(w1, 16))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 10, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 14), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 17, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                  _mm512_slli_epi32(w0, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 19, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                  _mm512_slli_epi32(w1, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 24, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 14), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 19-bit values, touching 19 512-bit words, using 1216 bytes */
static void filtereq19(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  19 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(524287);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 19),
                                                 _mm512_slli_epi32(w1, 13))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 25),
                                                     _mm512_slli_epi32(w0, 7))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 31),
                                                     _mm512_slli_epi32(w1, 1))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                 _mm512_slli_epi32(w0, 14))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 11)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 11, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                  _mm512_slli_epi32(w1, 15))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                     _mm512_slli_epi32(w0, 9))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 29),
                                                     _mm512_slli_epi32(w1, 3))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 3)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                  _mm512_slli_epi32(w1, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 21, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 15),
                                                  _mm512_slli_epi32(w1, 17))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 23, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 21),
                                                  _mm512_slli_epi32(w0, 11))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                  _mm512_slli_epi32(w0, 18))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 1)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 7)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 13), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 20-bit values, touching 20 512-bit words, using 1280 bytes */
static void filtereq20(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  20 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(1048575);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                 _mm512_slli_epi32(w1, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 4, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                 _mm512_slli_epi32(w1, 16))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 7, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_srli_epi32(w0, 12), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w1), broadcomp),
                                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 9, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                 _mm512_slli_epi32(w0, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 12, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 12), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 17, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 12), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 25, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 12), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 21-bit values, touching 21 512-bit words, using 1344 bytes */
static void filtereq21(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  21 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(2097151);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                 _mm512_slli_epi32(w1, 11))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 4, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                 _mm512_slli_epi32(w1, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 19),
                                                 _mm512_slli_epi32(w1, 13))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                     _mm512_slli_epi32(w0, 3))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 10, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                  _mm512_slli_epi32(w1, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 7)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 13, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                  _mm512_slli_epi32(w1, 15))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 27),
                                                     _mm512_slli_epi32(w0, 5))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 5)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 19, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 15),
                                                  _mm512_slli_epi32(w1, 17))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 25),
                                                     _mm512_slli_epi32(w0, 7))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 14),
                                                  _mm512_slli_epi32(w1, 18))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 25, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 13),
                                                  _mm512_slli_epi32(w1, 19))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                     _mm512_slli_epi32(w0, 9))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                  _mm512_slli_epi32(w1, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                  _mm512_slli_epi32(w0, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 11), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 22-bit values, touching 22 512-bit words, using 1408 bytes */
static void filtereq22(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  22 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(4194303);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                 _mm512_slli_epi32(w1, 10))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                 _mm512_slli_epi32(w0, 20))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 5, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                 _mm512_slli_epi32(w0, 18))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 8, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                 _mm512_slli_epi32(w0, 16))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 11, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                  _mm512_slli_epi32(w0, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 10), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 17, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                  _mm512_slli_epi32(w0, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                  _mm512_slli_epi32(w1, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 21, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 14),
                                                  _mm512_slli_epi32(w1, 18))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 24, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 27, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                  _mm512_slli_epi32(w1, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 10), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 23-bit values, touching 23 512-bit words, using 1472 bytes */
static void filtereq23(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  23 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(8388607);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 23),
                                                     _mm512_slli_epi32(w1, 9))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                 _mm512_slli_epi32(w0, 18))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 5, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 19),
                                                 _mm512_slli_epi32(w0, 13))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 10),
                                                 _mm512_slli_epi32(w1, 22))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 9, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 15),
                                                 _mm512_slli_epi32(w1, 17))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                     _mm512_slli_epi32(w0, 3))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 12, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 13, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 11),
                                                  _mm512_slli_epi32(w0, 21))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                     _mm512_slli_epi32(w1, 7))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 19, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 21),
                                                  _mm512_slli_epi32(w0, 11))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                  _mm512_slli_epi32(w1, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 23, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                  _mm512_slli_epi32(w1, 15))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                  _mm512_slli_epi32(w1, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 27, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 13),
                                                  _mm512_slli_epi32(w0, 19))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                  _mm512_slli_epi32(w0, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 9), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 24-bit values, touching 24 512-bit words, using 1536 bytes */
static void filtereq24(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  24 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(16777215);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                 _mm512_slli_epi32(w0, 16))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(_mm512_srli_epi32(w0, 8), broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(out + 4, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w1), broadcomp),
                                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                 _mm512_slli_epi32(w1, 16))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(_mm512_srli_epi32(w1, 8), broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 10, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 11, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 8), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(out + 12, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 8), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 19, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 8), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(out + 20, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 8), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 27, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 8), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(out + 28, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 8), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 25-bit values, touching 25 512-bit words, using 1600 bytes */
static void filtereq25(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  25 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(33554431);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                     _mm512_slli_epi32(w1, 7))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                 _mm512_slli_epi32(w0, 14))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 11),
                                                 _mm512_slli_epi32(w1, 21))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                     _mm512_slli_epi32(w0, 3))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                 _mm512_slli_epi32(w1, 10))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 15),
                                                 _mm512_slli_epi32(w0, 17))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 8, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 8),
                                                 _mm512_slli_epi32(w1, 24))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 11, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 19),
                                                  _mm512_slli_epi32(w1, 13))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 12, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                  _mm512_slli_epi32(w0, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                     _mm512_slli_epi32(w0, 9))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 17, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 9),
                                                  _mm512_slli_epi32(w0, 23))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 21, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 13),
                                                  _mm512_slli_epi32(w1, 19))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 25, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 17),
                                                  _mm512_slli_epi32(w0, 15))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 10),
                                                  _mm512_slli_epi32(w1, 22))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                  _mm512_slli_epi32(w1, 11))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                  _mm512_slli_epi32(w0, 18))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 7), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 26-bit values, touching 26 512-bit words, using 1664 bytes */
static void filtereq26(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  26 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(67108863);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                 _mm512_slli_epi32(w0, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 14),
                                                 _mm512_slli_epi32(w1, 18))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 8),
                                                 _mm512_slli_epi32(w0, 24))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                 _mm512_slli_epi32(w0, 10))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 8, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                 _mm512_slli_epi32(w1, 16))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 9, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 10),
                                                 _mm512_slli_epi32(w0, 22))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 13, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                  _mm512_slli_epi32(w1, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                  _mm512_slli_epi32(w0, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 6), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 19, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                  _mm512_slli_epi32(w0, 18))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 8),
                                                  _mm512_slli_epi32(w1, 24))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 23, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                  _mm512_slli_epi32(w1, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 24, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 25, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 10),
                                                  _mm512_slli_epi32(w1, 22))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                  _mm512_slli_epi32(w0, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                  _mm512_slli_epi32(w1, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 6), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 27-bit values, touching 27 512-bit words, using 1728 bytes */
static void filtereq27(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  27 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(134217727);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                 _mm512_slli_epi32(w0, 10))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                 _mm512_slli_epi32(w1, 15))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                 _mm512_slli_epi32(w0, 20))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 5, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 7),
                                                 _mm512_slli_epi32(w1, 25))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                     _mm512_slli_epi32(w0, 3))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 9, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 19),
                                                 _mm512_slli_epi32(w0, 13))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 10, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 14),
                                                  _mm512_slli_epi32(w1, 18))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 11, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 9),
                                                  _mm512_slli_epi32(w0, 23))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 31),
                                                     _mm512_slli_epi32(w1, 1))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 15, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                  _mm512_slli_epi32(w1, 11))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 17, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 11),
                                                  _mm512_slli_epi32(w1, 21))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 6),
                                                  _mm512_slli_epi32(w0, 26))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 1)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                     _mm512_slli_epi32(w0, 9))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                  _mm512_slli_epi32(w1, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 23, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 13),
                                                  _mm512_slli_epi32(w0, 19))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 24, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 8),
                                                  _mm512_slli_epi32(w1, 24))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                     _mm512_slli_epi32(w1, 7))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 15),
                                                  _mm512_slli_epi32(w1, 17))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 26);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 10),
                                                  _mm512_slli_epi32(w0, 22))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 5), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 28-bit values, touching 28 512-bit words, using 1792 bytes */
static void filtereq28(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  28 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(268435455);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                 _mm512_slli_epi32(w1, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                 _mm512_slli_epi32(w0, 16))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 5, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                 _mm512_slli_epi32(w1, 20))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 8),
                                                 _mm512_slli_epi32(w0, 24))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(_mm512_srli_epi32(w0, 4), broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w1), broadcomp),
                                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 11, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 12, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 13, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                  _mm512_slli_epi32(w0, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 8),
                                                  _mm512_slli_epi32(w1, 24))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 4), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 19, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 21, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                  _mm512_slli_epi32(w1, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 8),
                                                  _mm512_slli_epi32(w0, 24))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 4), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 27, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 26);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                  _mm512_slli_epi32(w0, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 27);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 8),
                                                  _mm512_slli_epi32(w1, 24))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 4), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 29-bit values, touching 29 512-bit words, using 1856 bytes */
static void filtereq29(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  29 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(536870911);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 29),
                                                     _mm512_slli_epi32(w1, 3))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 23),
                                                     _mm512_slli_epi32(w1, 9))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                 _mm512_slli_epi32(w0, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 5, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                 _mm512_slli_epi32(w1, 15))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                 _mm512_slli_epi32(w0, 18))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 11),
                                                 _mm512_slli_epi32(w1, 21))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 8, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 8),
                                                 _mm512_slli_epi32(w0, 24))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 9, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 5),
                                                 _mm512_slli_epi32(w1, 27))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 25),
                                                     _mm512_slli_epi32(w0, 7))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                  _mm512_slli_epi32(w1, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 15, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 19),
                                                  _mm512_slli_epi32(w0, 13))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 17, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 13),
                                                  _mm512_slli_epi32(w0, 19))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 10),
                                                  _mm512_slli_epi32(w1, 22))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 19, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 7),
                                                  _mm512_slli_epi32(w0, 25))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 4),
                                                  _mm512_slli_epi32(w1, 28))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 25, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                  _mm512_slli_epi32(w1, 11))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                  _mm512_slli_epi32(w0, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 27, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 15),
                                                  _mm512_slli_epi32(w1, 17))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 26);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                  _mm512_slli_epi32(w0, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 27);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 9),
                                                  _mm512_slli_epi32(w1, 23))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 28);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 6),
                                                  _mm512_slli_epi32(w0, 26))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 3), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 30-bit values, touching 30 512-bit words, using 1920 bytes */
static void filtereq30(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  30 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(1073741823);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 5, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                 _mm512_slli_epi32(w1, 10))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                 _mm512_slli_epi32(w0, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                 _mm512_slli_epi32(w1, 14))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 8, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                 _mm512_slli_epi32(w0, 16))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 9, _mm512_maskz_set1_epi32(
                   _mm512_cmpeq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 14),
                                                 _mm512_slli_epi32(w1, 18))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 10, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                  _mm512_slli_epi32(w0, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 11, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 10),
                                                  _mm512_slli_epi32(w1, 22))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 12, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 8),
                                                  _mm512_slli_epi32(w0, 24))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 13, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 6),
                                                  _mm512_slli_epi32(w1, 26))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 4),
                                                  _mm512_slli_epi32(w0, 28))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 2), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 21, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                  _mm512_slli_epi32(w0, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 23, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                  _mm512_slli_epi32(w0, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 24, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 25, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                  _mm512_slli_epi32(w0, 18))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                  _mm512_slli_epi32(w1, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 26);
  _mm512_storeu_si512(
      out + 27, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 10),
                                                  _mm512_slli_epi32(w0, 22))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 27);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 8),
                                                  _mm512_slli_epi32(w1, 24))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 28);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 6),
                                                  _mm512_slli_epi32(w0, 26))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 29);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 4),
                                                  _mm512_slli_epi32(w1, 28))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w1, 2), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 31-bit values, touching 31 512-bit words, using 1984 bytes */
static void filtereq31(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  31 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(2147483647);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpeq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 31),
                                                     _mm512_slli_epi32(w1, 1))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 29),
                                                     _mm512_slli_epi32(w1, 3))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                     _mm512_slli_epi32(w1, 7))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpeq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 23),
                                                     _mm512_slli_epi32(w1, 9))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 10, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                  _mm512_slli_epi32(w0, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 11, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                  _mm512_slli_epi32(w1, 11))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 12, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 13, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 19),
                                                  _mm512_slli_epi32(w1, 13))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                  _mm512_slli_epi32(w0, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 15, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                  _mm512_slli_epi32(w1, 15))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 17, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 15),
                                                  _mm512_slli_epi32(w1, 17))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                  _mm512_slli_epi32(w0, 18))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 19, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 13),
                                                  _mm512_slli_epi32(w1, 19))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                  _mm512_slli_epi32(w0, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 21, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 11),
                                                  _mm512_slli_epi32(w1, 21))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 10),
                                                  _mm512_slli_epi32(w0, 22))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 23, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 9),
                                                  _mm512_slli_epi32(w1, 23))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 24, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 8),
                                                  _mm512_slli_epi32(w0, 24))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 25, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 7),
                                                  _mm512_slli_epi32(w1, 25))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 26);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 6),
                                                  _mm512_slli_epi32(w0, 26))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 27);
  _mm512_storeu_si512(
      out + 27, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 5),
                                                  _mm512_slli_epi32(w1, 27))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 28);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 4),
                                                  _mm512_slli_epi32(w0, 28))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 29);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 3),
                                                  _mm512_slli_epi32(w1, 29))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 30);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpeq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 2),
                                                  _mm512_slli_epi32(w0, 30))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpeq_epi32_mask(
                                        _mm512_srli_epi32(w0, 1), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 32-bit values, touching 32 512-bit words, using 2048 bytes */
static void filtereq32(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  32 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(
      out + 0, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w0, broadcomp),
                                       0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w1, broadcomp),
                                       0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w0, broadcomp),
                                       0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w1, broadcomp),
                                       0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w0, broadcomp),
                                       0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 5, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w1, broadcomp),
                                       0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w0, broadcomp),
                                       0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w1, broadcomp),
                                       0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 8, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w0, broadcomp),
                                       0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 9, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w1, broadcomp),
                                       0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 10, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 11, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 12, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 13, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 15, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 17, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 19, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 21, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 23, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 24, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 25, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 26);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 27);
  _mm512_storeu_si512(
      out + 27, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 28);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 29);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 30);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 31);
  _mm512_storeu_si512(
      out + 31, _mm512_maskz_set1_epi32(_mm512_cmpeq_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
}

static void filterneq0(const __m512i *in, u32 *matches, const INTEGER comp) {
  if (comp == 0)
    memset(matches, 0, 512 * sizeof(*matches));
  else
    memset(matches, 1, 512 * sizeof(*matches));
}

/* we packed 512 1-bit values, touching 1 512-bit words, using 64 bytes */
static void filterneq1(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  1 512-bit word */
  __m512i w0;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(1);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 1)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 3)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 9)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 13)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 17)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 19)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 21)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 22)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 23)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 24)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 25)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 26)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 27)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 28)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 29)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 30)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 31), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 2-bit values, touching 2 512-bit words, using 128 bytes */
static void filterneq2(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  2 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(3);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 22)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 24)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 26)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 28)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 30), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 18)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 22)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 24)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 26)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 28)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 30), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 3-bit values, touching 3 512-bit words, using 192 bytes */
static void filterneq3(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  3 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(7);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 3)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 9)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 21)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 24)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 27)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 7)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 13)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 19)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 22)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 25)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 28)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 17)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 23)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 26)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 29), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 4-bit values, touching 4 512-bit words, using 256 bytes */
static void filterneq4(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  4 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(15);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 24)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 7, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_srli_epi32(w0, 28), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w1), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 24)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 28), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 24)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 28), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 24)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 28), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 5-bit values, touching 5 512-bit words, using 320 bytes */
static void filterneq5(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  5 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(31);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 25)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 13)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 18)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 23)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 1)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 21)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 26)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 31),
                                                     _mm512_slli_epi32(w1, 1))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 19)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 24)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                     _mm512_slli_epi32(w0, 3))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 17)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 22)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 27), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 6-bit values, touching 6 512-bit words, using 384 bytes */
static void filterneq6(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  6 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(63);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 24)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 22)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 26), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 18)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 24)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 22)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 26), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 7-bit values, touching 7 512-bit words, using 448 bytes */
static void filterneq7(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  7 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(127);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 21)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 17)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 24)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 13)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 23)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 19)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 15)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 22)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                     _mm512_slli_epi32(w0, 3))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 25), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 8-bit values, touching 8 512-bit words, using 512 bytes */
static void filterneq8(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  8 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(255);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 3, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_srli_epi32(w0, 24), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(out + 4, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w1), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 7, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_srli_epi32(w1, 24), broadcomp),
                                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 11, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 24), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(out + 12, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 24), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 19, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 24), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(out + 20, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 24), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 27, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 24), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(out + 28, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 24), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 9-bit values, touching 9 512-bit words, using 576 bytes */
static void filterneq9(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  9 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(511);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 9)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 13)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 22)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 17)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 21)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                     _mm512_slli_epi32(w1, 7))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 11)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                     _mm512_slli_epi32(w0, 3))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 19)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 23), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 10-bit values, touching 10 512-bit words, using 640 bytes */
static void filterneq10(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  10 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(1023);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 18)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 22), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 22), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 11-bit values, touching 11 512-bit words, using 704 bytes */
static void filterneq11(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  11 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(2047);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 2, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                 _mm512_slli_epi32(w1, 10))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                     _mm512_slli_epi32(w0, 9))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 13)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 25),
                                                     _mm512_slli_epi32(w0, 7))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 5)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 27),
                                                     _mm512_slli_epi32(w0, 5))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 17)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 7)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 18)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                     _mm512_slli_epi32(w0, 3))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 19)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 21), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 12-bit values, touching 12 512-bit words, using 768 bytes */
static void filterneq12(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  12 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(4095);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 7, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_srli_epi32(w0, 20), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w1), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 20), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 20), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 20), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 13-bit values, touching 13 512-bit words, using 832 bytes */
static void filterneq13(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  13 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(8191);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 13)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 7)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 4, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                 _mm512_slli_epi32(w0, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 1)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 9, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 21),
                                                 _mm512_slli_epi32(w0, 11))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                  _mm512_slli_epi32(w0, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 3)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 29),
                                                     _mm512_slli_epi32(w1, 3))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                     _mm512_slli_epi32(w0, 9))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 17)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 11)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 31),
                                                     _mm512_slli_epi32(w1, 1))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 25),
                                                     _mm512_slli_epi32(w0, 7))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 19), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 14-bit values, touching 14 512-bit words, using 896 bytes */
static void filterneq14(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  14 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(16383);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                 _mm512_slli_epi32(w1, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 13, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                  _mm512_slli_epi32(w0, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 18), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                  _mm512_slli_epi32(w1, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 18), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 15-bit values, touching 15 512-bit words, using 960 bytes */
static void filterneq15(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  15 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(32767);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 13)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 10, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                  _mm512_slli_epi32(w1, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 5)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 12, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 3)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                  _mm512_slli_epi32(w1, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 29),
                                                     _mm512_slli_epi32(w1, 3))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 27),
                                                     _mm512_slli_epi32(w0, 5))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                     _mm512_slli_epi32(w1, 7))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                     _mm512_slli_epi32(w0, 9))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 27, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                  _mm512_slli_epi32(w1, 11))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 19),
                                                  _mm512_slli_epi32(w0, 13))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 17), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 16-bit values, touching 16 512-bit words, using 1024 bytes */
static void filterneq16(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  16 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(65535);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(out + 1, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_srli_epi32(w0, 16), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(out + 2, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w1), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(out + 3, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_srli_epi32(w1, 16), broadcomp),
                                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(out + 4, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(out + 5, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_srli_epi32(w0, 16), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(out + 6, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w1), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(out + 7, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_srli_epi32(w1, 16), broadcomp),
                                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(out + 9, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_srli_epi32(w0, 16), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(out + 10, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 11, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 16), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(out + 12, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 13, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 16), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(out + 14, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 16), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 17, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 16), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(out + 18, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 19, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 16), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(out + 20, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 21, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 16), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(out + 22, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 16), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 25, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 16), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(out + 26, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 27, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 16), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(out + 28, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 29, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 16), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(out + 30, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 16), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 17-bit values, touching 17 512-bit words, using 1088 bytes */
static void filterneq17(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  17 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(131071);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                 _mm512_slli_epi32(w1, 15))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 3, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 19),
                                                 _mm512_slli_epi32(w0, 13))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 5, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                 _mm512_slli_epi32(w1, 11))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                     _mm512_slli_epi32(w0, 9))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                     _mm512_slli_epi32(w1, 7))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 27),
                                                     _mm512_slli_epi32(w0, 5))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 29),
                                                     _mm512_slli_epi32(w1, 3))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                  _mm512_slli_epi32(w0, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 3)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 5)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                  _mm512_slli_epi32(w0, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 13)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 15), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 18-bit values, touching 18 512-bit words, using 1152 bytes */
static void filterneq18(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  18 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(262143);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                 _mm512_slli_epi32(w1, 14))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 3, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                 _mm512_slli_epi32(w0, 10))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 8, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                 _mm512_slli_epi32(w1, 16))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 10, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 14), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 17, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                  _mm512_slli_epi32(w0, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 19, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                  _mm512_slli_epi32(w1, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 24, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 14), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 19-bit values, touching 19 512-bit words, using 1216 bytes */
static void filterneq19(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  19 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(524287);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 19),
                                                 _mm512_slli_epi32(w1, 13))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 25),
                                                     _mm512_slli_epi32(w0, 7))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 31),
                                                     _mm512_slli_epi32(w1, 1))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                 _mm512_slli_epi32(w0, 14))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 11)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 11, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                  _mm512_slli_epi32(w1, 15))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                     _mm512_slli_epi32(w0, 9))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 29),
                                                     _mm512_slli_epi32(w1, 3))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 3)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                  _mm512_slli_epi32(w1, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 21, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 15),
                                                  _mm512_slli_epi32(w1, 17))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 23, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 21),
                                                  _mm512_slli_epi32(w0, 11))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                  _mm512_slli_epi32(w0, 18))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 1)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 7)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 13), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 20-bit values, touching 20 512-bit words, using 1280 bytes */
static void filterneq20(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  20 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(1048575);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                 _mm512_slli_epi32(w1, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 4, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                 _mm512_slli_epi32(w1, 16))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 7, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_srli_epi32(w0, 12), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w1), broadcomp),
                                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 9, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                 _mm512_slli_epi32(w0, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 12, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 12), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 17, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 12), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 25, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 12), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 21-bit values, touching 21 512-bit words, using 1344 bytes */
static void filterneq21(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  21 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(2097151);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                 _mm512_slli_epi32(w1, 11))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 4, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                 _mm512_slli_epi32(w1, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 19),
                                                 _mm512_slli_epi32(w1, 13))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                     _mm512_slli_epi32(w0, 3))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 10, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                  _mm512_slli_epi32(w1, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 7)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 13, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                  _mm512_slli_epi32(w1, 15))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 27),
                                                     _mm512_slli_epi32(w0, 5))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 5)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 19, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 15),
                                                  _mm512_slli_epi32(w1, 17))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 25),
                                                     _mm512_slli_epi32(w0, 7))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 14),
                                                  _mm512_slli_epi32(w1, 18))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 25, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 13),
                                                  _mm512_slli_epi32(w1, 19))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                     _mm512_slli_epi32(w0, 9))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                  _mm512_slli_epi32(w1, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                  _mm512_slli_epi32(w0, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 11), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 22-bit values, touching 22 512-bit words, using 1408 bytes */
static void filterneq22(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  22 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(4194303);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                 _mm512_slli_epi32(w1, 10))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                 _mm512_slli_epi32(w0, 20))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 5, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                 _mm512_slli_epi32(w0, 18))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 8, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                 _mm512_slli_epi32(w0, 16))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 11, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                  _mm512_slli_epi32(w0, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 10), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 17, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                  _mm512_slli_epi32(w0, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                  _mm512_slli_epi32(w1, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 21, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 14),
                                                  _mm512_slli_epi32(w1, 18))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 24, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 27, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                  _mm512_slli_epi32(w1, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 10), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 23-bit values, touching 23 512-bit words, using 1472 bytes */
static void filterneq23(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  23 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(8388607);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 23),
                                                     _mm512_slli_epi32(w1, 9))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                 _mm512_slli_epi32(w0, 18))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 5, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 19),
                                                 _mm512_slli_epi32(w0, 13))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 10),
                                                 _mm512_slli_epi32(w1, 22))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 9, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 15),
                                                 _mm512_slli_epi32(w1, 17))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                     _mm512_slli_epi32(w0, 3))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 12, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 13, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 11),
                                                  _mm512_slli_epi32(w0, 21))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                     _mm512_slli_epi32(w1, 7))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 19, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 21),
                                                  _mm512_slli_epi32(w0, 11))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                  _mm512_slli_epi32(w1, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 23, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                  _mm512_slli_epi32(w1, 15))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                  _mm512_slli_epi32(w1, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 27, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 13),
                                                  _mm512_slli_epi32(w0, 19))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                  _mm512_slli_epi32(w0, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 9), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 24-bit values, touching 24 512-bit words, using 1536 bytes */
static void filterneq24(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  24 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(16777215);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                 _mm512_slli_epi32(w0, 16))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(
                                           _mm512_srli_epi32(w0, 8), broadcomp),
                                       0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(out + 4, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w1), broadcomp),
                                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                 _mm512_slli_epi32(w1, 16))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(
                                           _mm512_srli_epi32(w1, 8), broadcomp),
                                       0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 10, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 11, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 8), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(out + 12, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 8), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 19, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 8), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(out + 20, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 8), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 27, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 8), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(out + 28, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 8), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 25-bit values, touching 25 512-bit words, using 1600 bytes */
static void filterneq25(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  25 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(33554431);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                     _mm512_slli_epi32(w1, 7))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                 _mm512_slli_epi32(w0, 14))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 11),
                                                 _mm512_slli_epi32(w1, 21))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                     _mm512_slli_epi32(w0, 3))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                 _mm512_slli_epi32(w1, 10))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 15),
                                                 _mm512_slli_epi32(w0, 17))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 8, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 8),
                                                 _mm512_slli_epi32(w1, 24))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 11, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 19),
                                                  _mm512_slli_epi32(w1, 13))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 12, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                  _mm512_slli_epi32(w0, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                     _mm512_slli_epi32(w0, 9))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 17, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 9),
                                                  _mm512_slli_epi32(w0, 23))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 21, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 13),
                                                  _mm512_slli_epi32(w1, 19))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 25, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 17),
                                                  _mm512_slli_epi32(w0, 15))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 10),
                                                  _mm512_slli_epi32(w1, 22))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                  _mm512_slli_epi32(w1, 11))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                  _mm512_slli_epi32(w0, 18))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 7), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 26-bit values, touching 26 512-bit words, using 1664 bytes */
static void filterneq26(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  26 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(67108863);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                 _mm512_slli_epi32(w0, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 14),
                                                 _mm512_slli_epi32(w1, 18))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 8),
                                                 _mm512_slli_epi32(w0, 24))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                 _mm512_slli_epi32(w0, 10))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 8, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                 _mm512_slli_epi32(w1, 16))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 9, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 10),
                                                 _mm512_slli_epi32(w0, 22))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 13, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                  _mm512_slli_epi32(w1, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                  _mm512_slli_epi32(w0, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 6), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 19, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                  _mm512_slli_epi32(w0, 18))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 8),
                                                  _mm512_slli_epi32(w1, 24))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 23, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                  _mm512_slli_epi32(w1, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 24, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 25, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 10),
                                                  _mm512_slli_epi32(w1, 22))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                  _mm512_slli_epi32(w0, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                  _mm512_slli_epi32(w1, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 6), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 27-bit values, touching 27 512-bit words, using 1728 bytes */
static void filterneq27(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  27 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(134217727);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                 _mm512_slli_epi32(w0, 10))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                 _mm512_slli_epi32(w1, 15))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                 _mm512_slli_epi32(w0, 20))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 5, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 7),
                                                 _mm512_slli_epi32(w1, 25))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                     _mm512_slli_epi32(w0, 3))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 9, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 19),
                                                 _mm512_slli_epi32(w0, 13))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 10, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 14),
                                                  _mm512_slli_epi32(w1, 18))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 11, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 9),
                                                  _mm512_slli_epi32(w0, 23))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 31),
                                                     _mm512_slli_epi32(w1, 1))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 15, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                  _mm512_slli_epi32(w1, 11))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 17, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 11),
                                                  _mm512_slli_epi32(w1, 21))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 6),
                                                  _mm512_slli_epi32(w0, 26))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 1)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                     _mm512_slli_epi32(w0, 9))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                  _mm512_slli_epi32(w1, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 23, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 13),
                                                  _mm512_slli_epi32(w0, 19))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 24, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 8),
                                                  _mm512_slli_epi32(w1, 24))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                     _mm512_slli_epi32(w1, 7))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 15),
                                                  _mm512_slli_epi32(w1, 17))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 26);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 10),
                                                  _mm512_slli_epi32(w0, 22))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 5), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 28-bit values, touching 28 512-bit words, using 1792 bytes */
static void filterneq28(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  28 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(268435455);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                 _mm512_slli_epi32(w1, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                 _mm512_slli_epi32(w0, 16))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 5, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                 _mm512_slli_epi32(w1, 20))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 8),
                                                 _mm512_slli_epi32(w0, 24))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(
                                           _mm512_srli_epi32(w0, 4), broadcomp),
                                       0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w1), broadcomp),
                                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 11, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 12, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 13, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                  _mm512_slli_epi32(w0, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 8),
                                                  _mm512_slli_epi32(w1, 24))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 4), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 19, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 21, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                  _mm512_slli_epi32(w1, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 8),
                                                  _mm512_slli_epi32(w0, 24))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 4), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 27, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 26);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                  _mm512_slli_epi32(w0, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 27);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 8),
                                                  _mm512_slli_epi32(w1, 24))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 4), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 29-bit values, touching 29 512-bit words, using 1856 bytes */
static void filterneq29(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  29 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(536870911);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 29),
                                                     _mm512_slli_epi32(w1, 3))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 23),
                                                     _mm512_slli_epi32(w1, 9))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                 _mm512_slli_epi32(w0, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 5, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                 _mm512_slli_epi32(w1, 15))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                 _mm512_slli_epi32(w0, 18))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 11),
                                                 _mm512_slli_epi32(w1, 21))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 8, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 8),
                                                 _mm512_slli_epi32(w0, 24))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 9, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 5),
                                                 _mm512_slli_epi32(w1, 27))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 25),
                                                     _mm512_slli_epi32(w0, 7))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                  _mm512_slli_epi32(w1, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 15, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 19),
                                                  _mm512_slli_epi32(w0, 13))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 17, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 13),
                                                  _mm512_slli_epi32(w0, 19))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 10),
                                                  _mm512_slli_epi32(w1, 22))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 19, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 7),
                                                  _mm512_slli_epi32(w0, 25))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 4),
                                                  _mm512_slli_epi32(w1, 28))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 25, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                  _mm512_slli_epi32(w1, 11))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                  _mm512_slli_epi32(w0, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 27, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 15),
                                                  _mm512_slli_epi32(w1, 17))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 26);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                  _mm512_slli_epi32(w0, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 27);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 9),
                                                  _mm512_slli_epi32(w1, 23))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 28);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 6),
                                                  _mm512_slli_epi32(w0, 26))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 3), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 30-bit values, touching 30 512-bit words, using 1920 bytes */
static void filterneq30(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  30 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(1073741823);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 5, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                 _mm512_slli_epi32(w1, 10))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                 _mm512_slli_epi32(w0, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                 _mm512_slli_epi32(w1, 14))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 8, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                 _mm512_slli_epi32(w0, 16))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 9, _mm512_maskz_set1_epi32(
                   _mm512_cmpneq_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 14),
                                                 _mm512_slli_epi32(w1, 18))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 10, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                  _mm512_slli_epi32(w0, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 11, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 10),
                                                  _mm512_slli_epi32(w1, 22))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 12, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 8),
                                                  _mm512_slli_epi32(w0, 24))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 13, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 6),
                                                  _mm512_slli_epi32(w1, 26))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 4),
                                                  _mm512_slli_epi32(w0, 28))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 2), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 21, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                  _mm512_slli_epi32(w0, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 23, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                  _mm512_slli_epi32(w0, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 24, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 25, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                  _mm512_slli_epi32(w0, 18))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                  _mm512_slli_epi32(w1, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 26);
  _mm512_storeu_si512(
      out + 27, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 10),
                                                  _mm512_slli_epi32(w0, 22))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 27);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 8),
                                                  _mm512_slli_epi32(w1, 24))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 28);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 6),
                                                  _mm512_slli_epi32(w0, 26))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 29);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 4),
                                                  _mm512_slli_epi32(w1, 28))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w1, 2), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 31-bit values, touching 31 512-bit words, using 1984 bytes */
static void filterneq31(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  31 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(2147483647);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpneq_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 31),
                                                     _mm512_slli_epi32(w1, 1))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 29),
                                                     _mm512_slli_epi32(w1, 3))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                     _mm512_slli_epi32(w1, 7))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpneq_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 23),
                                                     _mm512_slli_epi32(w1, 9))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 10, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                  _mm512_slli_epi32(w0, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 11, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                  _mm512_slli_epi32(w1, 11))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 12, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 13, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 19),
                                                  _mm512_slli_epi32(w1, 13))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                  _mm512_slli_epi32(w0, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 15, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                  _mm512_slli_epi32(w1, 15))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 17, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 15),
                                                  _mm512_slli_epi32(w1, 17))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                  _mm512_slli_epi32(w0, 18))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 19, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 13),
                                                  _mm512_slli_epi32(w1, 19))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                  _mm512_slli_epi32(w0, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 21, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 11),
                                                  _mm512_slli_epi32(w1, 21))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 10),
                                                  _mm512_slli_epi32(w0, 22))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 23, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 9),
                                                  _mm512_slli_epi32(w1, 23))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 24, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 8),
                                                  _mm512_slli_epi32(w0, 24))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 25, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 7),
                                                  _mm512_slli_epi32(w1, 25))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 26);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 6),
                                                  _mm512_slli_epi32(w0, 26))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 27);
  _mm512_storeu_si512(
      out + 27, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 5),
                                                  _mm512_slli_epi32(w1, 27))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 28);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 4),
                                                  _mm512_slli_epi32(w0, 28))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 29);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 3),
                                                  _mm512_slli_epi32(w1, 29))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 30);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpneq_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 2),
                                                  _mm512_slli_epi32(w0, 30))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpneq_epi32_mask(
                                        _mm512_srli_epi32(w0, 1), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 32-bit values, touching 32 512-bit words, using 2048 bytes */
static void filterneq32(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  32 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(
      out + 0, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w0, broadcomp),
                                       0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w1, broadcomp),
                                       0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w0, broadcomp),
                                       0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w1, broadcomp),
                                       0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w0, broadcomp),
                                       0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 5, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w1, broadcomp),
                                       0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w0, broadcomp),
                                       0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w1, broadcomp),
                                       0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 8, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w0, broadcomp),
                                       0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 9, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w1, broadcomp),
                                       0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 10, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 11, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 12, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 13, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 15, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 17, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 19, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 21, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 23, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 24, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 25, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 26);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 27);
  _mm512_storeu_si512(
      out + 27, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 28);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 29);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 30);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 31);
  _mm512_storeu_si512(
      out + 31, _mm512_maskz_set1_epi32(_mm512_cmpneq_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
}

static void filtergt0(const __m512i *in, u32 *matches, const INTEGER comp) {
  if (comp < 0)
    memset(matches, 1, 512 * sizeof(*matches));
  else
    memset(matches, 0, 512 * sizeof(*matches));
}

/* we packed 512 1-bit values, touching 1 512-bit words, using 64 bytes */
static void filtergt1(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  1 512-bit word */
  __m512i w0;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(1);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 1)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 3)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 9)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 13)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 17)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 19)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 21)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 22)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 23)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 24)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 25)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 26)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 27)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 28)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 29)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 30)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 31), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 2-bit values, touching 2 512-bit words, using 128 bytes */
static void filtergt2(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  2 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(3);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 22)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 24)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 26)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 28)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 30), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 18)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 22)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 24)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 26)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 28)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 30), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 3-bit values, touching 3 512-bit words, using 192 bytes */
static void filtergt3(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  3 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(7);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 3)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 9)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 21)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 24)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 27)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 7)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 13)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 19)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 22)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 25)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 28)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 17)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 23)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 26)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 29), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 4-bit values, touching 4 512-bit words, using 256 bytes */
static void filtergt4(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  4 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(15);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 24)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 7, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_srli_epi32(w0, 28), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w1), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 24)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 28), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 24)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 28), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 24)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 28), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 5-bit values, touching 5 512-bit words, using 320 bytes */
static void filtergt5(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  5 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(31);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 25)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 13)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 18)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 23)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 1)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 21)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 26)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 31),
                                                     _mm512_slli_epi32(w1, 1))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 19)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 24)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                     _mm512_slli_epi32(w0, 3))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 17)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 22)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 27), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 6-bit values, touching 6 512-bit words, using 384 bytes */
static void filtergt6(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  6 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(63);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 24)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 22)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 26), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 18)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 24)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 22)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 26), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 7-bit values, touching 7 512-bit words, using 448 bytes */
static void filtergt7(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  7 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(127);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 21)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 17)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 24)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 13)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 23)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 19)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 15)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 22)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                     _mm512_slli_epi32(w0, 3))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 25), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 8-bit values, touching 8 512-bit words, using 512 bytes */
static void filtergt8(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  8 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(255);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 3, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_srli_epi32(w0, 24), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(out + 4, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w1), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 7, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_srli_epi32(w1, 24), broadcomp),
                                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 11, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 24), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(out + 12, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 24), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 19, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 24), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(out + 20, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 24), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 27, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 24), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(out + 28, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 24), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 9-bit values, touching 9 512-bit words, using 576 bytes */
static void filtergt9(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  9 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(511);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 9)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 13)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 22)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 17)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 21)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                     _mm512_slli_epi32(w1, 7))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 11)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                     _mm512_slli_epi32(w0, 3))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 19)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 23), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 10-bit values, touching 10 512-bit words, using 640 bytes */
static void filtergt10(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  10 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(1023);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 18)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 22), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 22), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 11-bit values, touching 11 512-bit words, using 704 bytes */
static void filtergt11(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  11 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(2047);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 2, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                 _mm512_slli_epi32(w1, 10))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                     _mm512_slli_epi32(w0, 9))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 13)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 25),
                                                     _mm512_slli_epi32(w0, 7))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 5)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 27),
                                                     _mm512_slli_epi32(w0, 5))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 17)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 7)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 18)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                     _mm512_slli_epi32(w0, 3))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 19)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 21), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 12-bit values, touching 12 512-bit words, using 768 bytes */
static void filtergt12(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  12 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(4095);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 7, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_srli_epi32(w0, 20), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w1), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 20), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 20), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 20), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 13-bit values, touching 13 512-bit words, using 832 bytes */
static void filtergt13(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  13 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(8191);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 13)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 7)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 4, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                 _mm512_slli_epi32(w0, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 1)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 9, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 21),
                                                 _mm512_slli_epi32(w0, 11))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                  _mm512_slli_epi32(w0, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 3)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 29),
                                                     _mm512_slli_epi32(w1, 3))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                     _mm512_slli_epi32(w0, 9))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 17)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 11)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 31),
                                                     _mm512_slli_epi32(w1, 1))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 25),
                                                     _mm512_slli_epi32(w0, 7))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 19), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 14-bit values, touching 14 512-bit words, using 896 bytes */
static void filtergt14(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  14 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(16383);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                 _mm512_slli_epi32(w1, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 13, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                  _mm512_slli_epi32(w0, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 18), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                  _mm512_slli_epi32(w1, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 18), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 15-bit values, touching 15 512-bit words, using 960 bytes */
static void filtergt15(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  15 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(32767);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 13)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 10, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                  _mm512_slli_epi32(w1, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 5)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 12, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 3)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                  _mm512_slli_epi32(w1, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 29),
                                                     _mm512_slli_epi32(w1, 3))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 27),
                                                     _mm512_slli_epi32(w0, 5))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                     _mm512_slli_epi32(w1, 7))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                     _mm512_slli_epi32(w0, 9))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 27, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                  _mm512_slli_epi32(w1, 11))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 19),
                                                  _mm512_slli_epi32(w0, 13))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 17), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 16-bit values, touching 16 512-bit words, using 1024 bytes */
static void filtergt16(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  16 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(65535);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(out + 1, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_srli_epi32(w0, 16), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(out + 2, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w1), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(out + 3, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_srli_epi32(w1, 16), broadcomp),
                                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(out + 4, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(out + 5, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_srli_epi32(w0, 16), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(out + 6, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w1), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(out + 7, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_srli_epi32(w1, 16), broadcomp),
                                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(out + 9, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_srli_epi32(w0, 16), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(out + 10, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 11, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 16), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(out + 12, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 13, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 16), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(out + 14, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 16), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 17, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 16), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(out + 18, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 19, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 16), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(out + 20, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 21, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 16), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(out + 22, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 16), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 25, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 16), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(out + 26, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 27, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 16), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(out + 28, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 29, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 16), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(out + 30, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 16), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 17-bit values, touching 17 512-bit words, using 1088 bytes */
static void filtergt17(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  17 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(131071);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                 _mm512_slli_epi32(w1, 15))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 3, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 19),
                                                 _mm512_slli_epi32(w0, 13))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 5, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                 _mm512_slli_epi32(w1, 11))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                     _mm512_slli_epi32(w0, 9))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                     _mm512_slli_epi32(w1, 7))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 27),
                                                     _mm512_slli_epi32(w0, 5))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 29),
                                                     _mm512_slli_epi32(w1, 3))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                  _mm512_slli_epi32(w0, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 3)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 5)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                  _mm512_slli_epi32(w0, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 13)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 15), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 18-bit values, touching 18 512-bit words, using 1152 bytes */
static void filtergt18(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  18 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(262143);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                 _mm512_slli_epi32(w1, 14))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 3, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                 _mm512_slli_epi32(w0, 10))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 8, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                 _mm512_slli_epi32(w1, 16))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 10, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 14), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 17, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                  _mm512_slli_epi32(w0, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 19, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                  _mm512_slli_epi32(w1, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 24, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 14), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 19-bit values, touching 19 512-bit words, using 1216 bytes */
static void filtergt19(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  19 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(524287);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 19),
                                                 _mm512_slli_epi32(w1, 13))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 25),
                                                     _mm512_slli_epi32(w0, 7))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 31),
                                                     _mm512_slli_epi32(w1, 1))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                 _mm512_slli_epi32(w0, 14))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 11)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 11, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                  _mm512_slli_epi32(w1, 15))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                     _mm512_slli_epi32(w0, 9))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 29),
                                                     _mm512_slli_epi32(w1, 3))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 3)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                  _mm512_slli_epi32(w1, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 21, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 15),
                                                  _mm512_slli_epi32(w1, 17))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 23, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 21),
                                                  _mm512_slli_epi32(w0, 11))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                  _mm512_slli_epi32(w0, 18))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 1)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 7)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 13), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 20-bit values, touching 20 512-bit words, using 1280 bytes */
static void filtergt20(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  20 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(1048575);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                 _mm512_slli_epi32(w1, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 4, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                 _mm512_slli_epi32(w1, 16))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 7, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_srli_epi32(w0, 12), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w1), broadcomp),
                                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 9, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                 _mm512_slli_epi32(w0, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 12, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 12), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 17, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 12), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 25, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 12), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 21-bit values, touching 21 512-bit words, using 1344 bytes */
static void filtergt21(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  21 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(2097151);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                 _mm512_slli_epi32(w1, 11))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 4, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                 _mm512_slli_epi32(w1, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 19),
                                                 _mm512_slli_epi32(w1, 13))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                     _mm512_slli_epi32(w0, 3))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 10, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                  _mm512_slli_epi32(w1, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 7)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 13, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                  _mm512_slli_epi32(w1, 15))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 27),
                                                     _mm512_slli_epi32(w0, 5))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 5)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 19, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 15),
                                                  _mm512_slli_epi32(w1, 17))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 25),
                                                     _mm512_slli_epi32(w0, 7))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 14),
                                                  _mm512_slli_epi32(w1, 18))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 25, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 13),
                                                  _mm512_slli_epi32(w1, 19))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                     _mm512_slli_epi32(w0, 9))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                  _mm512_slli_epi32(w1, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                  _mm512_slli_epi32(w0, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 11), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 22-bit values, touching 22 512-bit words, using 1408 bytes */
static void filtergt22(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  22 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(4194303);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                 _mm512_slli_epi32(w1, 10))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                 _mm512_slli_epi32(w0, 20))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 5, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                 _mm512_slli_epi32(w0, 18))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 8, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                 _mm512_slli_epi32(w0, 16))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 11, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                  _mm512_slli_epi32(w0, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 10), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 17, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                  _mm512_slli_epi32(w0, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                  _mm512_slli_epi32(w1, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 21, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 14),
                                                  _mm512_slli_epi32(w1, 18))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 24, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 27, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                  _mm512_slli_epi32(w1, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 10), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 23-bit values, touching 23 512-bit words, using 1472 bytes */
static void filtergt23(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  23 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(8388607);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 23),
                                                     _mm512_slli_epi32(w1, 9))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                 _mm512_slli_epi32(w0, 18))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 5, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 19),
                                                 _mm512_slli_epi32(w0, 13))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 10),
                                                 _mm512_slli_epi32(w1, 22))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 9, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 15),
                                                 _mm512_slli_epi32(w1, 17))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                     _mm512_slli_epi32(w0, 3))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 12, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 13, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 11),
                                                  _mm512_slli_epi32(w0, 21))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                     _mm512_slli_epi32(w1, 7))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 19, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 21),
                                                  _mm512_slli_epi32(w0, 11))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                  _mm512_slli_epi32(w1, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 23, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                  _mm512_slli_epi32(w1, 15))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                  _mm512_slli_epi32(w1, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 27, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 13),
                                                  _mm512_slli_epi32(w0, 19))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                  _mm512_slli_epi32(w0, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 9), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 24-bit values, touching 24 512-bit words, using 1536 bytes */
static void filtergt24(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  24 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(16777215);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                 _mm512_slli_epi32(w0, 16))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(_mm512_srli_epi32(w0, 8), broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(out + 4, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w1), broadcomp),
                                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                 _mm512_slli_epi32(w1, 16))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(_mm512_srli_epi32(w1, 8), broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 10, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 11, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 8), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(out + 12, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 8), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 19, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 8), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(out + 20, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 8), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 27, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 8), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(out + 28, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 8), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 25-bit values, touching 25 512-bit words, using 1600 bytes */
static void filtergt25(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  25 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(33554431);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                     _mm512_slli_epi32(w1, 7))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                 _mm512_slli_epi32(w0, 14))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 11),
                                                 _mm512_slli_epi32(w1, 21))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                     _mm512_slli_epi32(w0, 3))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                 _mm512_slli_epi32(w1, 10))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 15),
                                                 _mm512_slli_epi32(w0, 17))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 8, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 8),
                                                 _mm512_slli_epi32(w1, 24))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 11, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 19),
                                                  _mm512_slli_epi32(w1, 13))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 12, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                  _mm512_slli_epi32(w0, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                     _mm512_slli_epi32(w0, 9))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 17, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 9),
                                                  _mm512_slli_epi32(w0, 23))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 21, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 13),
                                                  _mm512_slli_epi32(w1, 19))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 25, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 17),
                                                  _mm512_slli_epi32(w0, 15))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 10),
                                                  _mm512_slli_epi32(w1, 22))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                  _mm512_slli_epi32(w1, 11))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                  _mm512_slli_epi32(w0, 18))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 7), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 26-bit values, touching 26 512-bit words, using 1664 bytes */
static void filtergt26(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  26 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(67108863);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                 _mm512_slli_epi32(w0, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 14),
                                                 _mm512_slli_epi32(w1, 18))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 8),
                                                 _mm512_slli_epi32(w0, 24))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                 _mm512_slli_epi32(w0, 10))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 8, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                 _mm512_slli_epi32(w1, 16))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 9, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 10),
                                                 _mm512_slli_epi32(w0, 22))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 13, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                  _mm512_slli_epi32(w1, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                  _mm512_slli_epi32(w0, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 6), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 19, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                  _mm512_slli_epi32(w0, 18))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 8),
                                                  _mm512_slli_epi32(w1, 24))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 23, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                  _mm512_slli_epi32(w1, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 24, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 25, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 10),
                                                  _mm512_slli_epi32(w1, 22))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                  _mm512_slli_epi32(w0, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                  _mm512_slli_epi32(w1, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 6), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 27-bit values, touching 27 512-bit words, using 1728 bytes */
static void filtergt27(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  27 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(134217727);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                 _mm512_slli_epi32(w0, 10))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                 _mm512_slli_epi32(w1, 15))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                 _mm512_slli_epi32(w0, 20))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 5, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 7),
                                                 _mm512_slli_epi32(w1, 25))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                     _mm512_slli_epi32(w0, 3))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 9, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 19),
                                                 _mm512_slli_epi32(w0, 13))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 10, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 14),
                                                  _mm512_slli_epi32(w1, 18))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 11, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 9),
                                                  _mm512_slli_epi32(w0, 23))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 31),
                                                     _mm512_slli_epi32(w1, 1))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 15, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                  _mm512_slli_epi32(w1, 11))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 17, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 11),
                                                  _mm512_slli_epi32(w1, 21))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 6),
                                                  _mm512_slli_epi32(w0, 26))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w0, 1)), broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                     _mm512_slli_epi32(w0, 9))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                  _mm512_slli_epi32(w1, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 23, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 13),
                                                  _mm512_slli_epi32(w0, 19))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 24, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 8),
                                                  _mm512_slli_epi32(w1, 24))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                     _mm512_slli_epi32(w1, 7))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 15),
                                                  _mm512_slli_epi32(w1, 17))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 26);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 10),
                                                  _mm512_slli_epi32(w0, 22))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 5), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 28-bit values, touching 28 512-bit words, using 1792 bytes */
static void filtergt28(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  28 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(268435455);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                 _mm512_slli_epi32(w1, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                 _mm512_slli_epi32(w0, 16))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 5, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                 _mm512_slli_epi32(w1, 20))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 8),
                                                 _mm512_slli_epi32(w0, 24))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(_mm512_srli_epi32(w0, 4), broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w1), broadcomp),
                                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 11, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 12, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 13, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                  _mm512_slli_epi32(w0, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 8),
                                                  _mm512_slli_epi32(w1, 24))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 4), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w0), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 19, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 21, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                  _mm512_slli_epi32(w1, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 8),
                                                  _mm512_slli_epi32(w0, 24))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 4), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 27, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 26);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                  _mm512_slli_epi32(w0, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 27);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 8),
                                                  _mm512_slli_epi32(w1, 24))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 4), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 29-bit values, touching 29 512-bit words, using 1856 bytes */
static void filtergt29(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  29 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(536870911);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 29),
                                                     _mm512_slli_epi32(w1, 3))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 23),
                                                     _mm512_slli_epi32(w1, 9))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                 _mm512_slli_epi32(w0, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 5, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                 _mm512_slli_epi32(w1, 15))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                 _mm512_slli_epi32(w0, 18))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 11),
                                                 _mm512_slli_epi32(w1, 21))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 8, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 8),
                                                 _mm512_slli_epi32(w0, 24))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 9, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 5),
                                                 _mm512_slli_epi32(w1, 27))),
                       broadcomp),
                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                     _mm512_slli_epi32(w0, 1))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 25),
                                                     _mm512_slli_epi32(w0, 7))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                  _mm512_slli_epi32(w1, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 15, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 19),
                                                  _mm512_slli_epi32(w0, 13))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 17, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 13),
                                                  _mm512_slli_epi32(w0, 19))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 10),
                                                  _mm512_slli_epi32(w1, 22))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 19, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 7),
                                                  _mm512_slli_epi32(w0, 25))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 4),
                                                  _mm512_slli_epi32(w1, 28))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1)), broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 25, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                  _mm512_slli_epi32(w1, 11))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                  _mm512_slli_epi32(w0, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 27, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 15),
                                                  _mm512_slli_epi32(w1, 17))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 26);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                  _mm512_slli_epi32(w0, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 27);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 9),
                                                  _mm512_slli_epi32(w1, 23))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 28);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 6),
                                                  _mm512_slli_epi32(w0, 26))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 3), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 30-bit values, touching 30 512-bit words, using 1920 bytes */
static void filtergt30(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  30 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(1073741823);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                     _mm512_slli_epi32(w1, 2))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                     _mm512_slli_epi32(w1, 6))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 5, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                 _mm512_slli_epi32(w1, 10))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                 _mm512_slli_epi32(w0, 12))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                 _mm512_slli_epi32(w1, 14))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 8, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                 _mm512_slli_epi32(w0, 16))),
                       broadcomp),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 9, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(
                       _mm512_and_si512(
                           mask, _mm512_or_si512(_mm512_srli_epi32(w0, 14),
                                                 _mm512_slli_epi32(w1, 18))),
                       broadcomp),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 10, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                  _mm512_slli_epi32(w0, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 11, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 10),
                                                  _mm512_slli_epi32(w1, 22))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 12, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 8),
                                                  _mm512_slli_epi32(w0, 24))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 13, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 6),
                                                  _mm512_slli_epi32(w1, 26))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 4),
                                                  _mm512_slli_epi32(w0, 28))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 2), broadcomp),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_and_si512(mask, w1), broadcomp),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                     _mm512_slli_epi32(w1, 4))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                     _mm512_slli_epi32(w1, 8))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 21, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                  _mm512_slli_epi32(w0, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                  _mm512_slli_epi32(w1, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 23, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                  _mm512_slli_epi32(w0, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 24, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                  _mm512_slli_epi32(w1, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 25, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                  _mm512_slli_epi32(w0, 18))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                  _mm512_slli_epi32(w1, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 26);
  _mm512_storeu_si512(
      out + 27, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 10),
                                                  _mm512_slli_epi32(w0, 22))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 27);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 8),
                                                  _mm512_slli_epi32(w1, 24))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 28);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 6),
                                                  _mm512_slli_epi32(w0, 26))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 29);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 4),
                                                  _mm512_slli_epi32(w1, 28))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w1, 2), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 31-bit values, touching 31 512-bit words, using 1984 bytes */
static void filtergt31(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  31 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(2147483647);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       _mm512_and_si512(mask, w0), broadcomp),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 31),
                                                     _mm512_slli_epi32(w1, 1))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                     _mm512_slli_epi32(w0, 2))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 29),
                                                     _mm512_slli_epi32(w1, 3))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                     _mm512_slli_epi32(w0, 4))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                     _mm512_slli_epi32(w1, 5))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                     _mm512_slli_epi32(w0, 6))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                     _mm512_slli_epi32(w1, 7))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                     _mm512_slli_epi32(w0, 8))),
              broadcomp),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              _mm512_and_si512(mask, _mm512_or_si512(_mm512_srli_epi32(w0, 23),
                                                     _mm512_slli_epi32(w1, 9))),
              broadcomp),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 10, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                  _mm512_slli_epi32(w0, 10))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 11, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                  _mm512_slli_epi32(w1, 11))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 12, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                  _mm512_slli_epi32(w0, 12))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 13, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 19),
                                                  _mm512_slli_epi32(w1, 13))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                  _mm512_slli_epi32(w0, 14))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 15, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                  _mm512_slli_epi32(w1, 15))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                  _mm512_slli_epi32(w0, 16))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 17, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 15),
                                                  _mm512_slli_epi32(w1, 17))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                  _mm512_slli_epi32(w0, 18))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 19, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 13),
                                                  _mm512_slli_epi32(w1, 19))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                  _mm512_slli_epi32(w0, 20))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 21, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 11),
                                                  _mm512_slli_epi32(w1, 21))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 10),
                                                  _mm512_slli_epi32(w0, 22))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 23, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 9),
                                                  _mm512_slli_epi32(w1, 23))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 24, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 8),
                                                  _mm512_slli_epi32(w0, 24))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 25, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 7),
                                                  _mm512_slli_epi32(w1, 25))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 26);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 6),
                                                  _mm512_slli_epi32(w0, 26))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 27);
  _mm512_storeu_si512(
      out + 27, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 5),
                                                  _mm512_slli_epi32(w1, 27))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 28);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 4),
                                                  _mm512_slli_epi32(w0, 28))),
                        broadcomp),
                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 29);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w0, 3),
                                                  _mm512_slli_epi32(w1, 29))),
                        broadcomp),
                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 30);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(
                    _mm512_cmpgt_epi32_mask(
                        _mm512_and_si512(
                            mask, _mm512_or_si512(_mm512_srli_epi32(w1, 2),
                                                  _mm512_slli_epi32(w0, 30))),
                        broadcomp),
                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        _mm512_srli_epi32(w0, 1), broadcomp),
                                    0xFFFFFFFF));
}

/* we packed 512 32-bit values, touching 32 512-bit words, using 2048 bytes */
static void filtergt32(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  32 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(
      out + 0, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w0, broadcomp),
                                       0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w1, broadcomp),
                                       0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w0, broadcomp),
                                       0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w1, broadcomp),
                                       0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w0, broadcomp),
                                       0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 5, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w1, broadcomp),
                                       0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w0, broadcomp),
                                       0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w1, broadcomp),
                                       0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 8, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w0, broadcomp),
                                       0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 9, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w1, broadcomp),
                                       0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 10, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 11, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 12, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 13, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 15, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 17, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 19, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 21, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 23, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 24, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 25, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 26);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 27);
  _mm512_storeu_si512(
      out + 27, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 28);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 29);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 30);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w0, broadcomp),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 31);
  _mm512_storeu_si512(
      out + 31, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(w1, broadcomp),
                                        0xFFFFFFFF));
}

static void filterlt0(const __m512i *in, u32 *matches, const INTEGER comp) {
  if (comp > 0)
    memset(matches, 1, 512 * sizeof(*matches));
  else
    memset(matches, 0, 512 * sizeof(*matches));
}

/* we packed 512 1-bit values, touching 1 512-bit words, using 64 bytes */
static void filterlt1(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  1 512-bit word */
  __m512i w0;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(1);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 1))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 3))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 9))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 13))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 17))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 19))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 21))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 22))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 23))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 24))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 25))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 26))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 27))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 28))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 29))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 30))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 31)),
                                    0xFFFFFFFF));
}

/* we packed 512 2-bit values, touching 2 512-bit words, using 128 bytes */
static void filterlt2(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  2 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(3);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 22))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 24))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 26))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 28))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 30)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w1)),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 18))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 22))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 24))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 26))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 28))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 30)),
                                    0xFFFFFFFF));
}

/* we packed 512 3-bit values, touching 3 512-bit words, using 192 bytes */
static void filterlt3(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  3 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(7);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 3))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 9))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 21))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 24))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 27))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                   _mm512_slli_epi32(w1, 2)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 7))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 13))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 19))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 22))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 25))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 28))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                   _mm512_slli_epi32(w0, 1)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 17))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 23))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 26))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 29)),
                                    0xFFFFFFFF));
}

/* we packed 512 4-bit values, touching 4 512-bit words, using 256 bytes */
static void filterlt4(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  4 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(15);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 24))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 7, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_srli_epi32(w0, 28)),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w1)),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 24))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 28)),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w0)),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 24))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 28)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w1)),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 24))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 28)),
                                    0xFFFFFFFF));
}

/* we packed 512 5-bit values, touching 5 512-bit words, using 320 bytes */
static void filterlt5(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  5 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(31);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 25))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                   _mm512_slli_epi32(w1, 2)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 13))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 18))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 23))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                   _mm512_slli_epi32(w0, 4)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 1))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 21))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 26))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 31),
                                                   _mm512_slli_epi32(w1, 1)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 19))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 24))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                   _mm512_slli_epi32(w0, 3)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 17))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 22))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 27)),
                                    0xFFFFFFFF));
}

/* we packed 512 6-bit values, touching 6 512-bit words, using 384 bytes */
static void filterlt6(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  6 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(63);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 24))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                   _mm512_slli_epi32(w1, 2)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 22))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                   _mm512_slli_epi32(w0, 4)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 26)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w1)),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 18))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 24))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                   _mm512_slli_epi32(w0, 2)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 22))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                   _mm512_slli_epi32(w1, 4)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 26)),
                                    0xFFFFFFFF));
}

/* we packed 512 7-bit values, touching 7 512-bit words, using 448 bytes */
static void filterlt7(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  7 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(127);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 21))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                   _mm512_slli_epi32(w1, 4)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 17))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 24))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                   _mm512_slli_epi32(w0, 1)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 13))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                   _mm512_slli_epi32(w1, 5)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 23))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                   _mm512_slli_epi32(w0, 2)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 19))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                   _mm512_slli_epi32(w1, 6)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 15))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 22))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                   _mm512_slli_epi32(w0, 3)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 25)),
                                    0xFFFFFFFF));
}

/* we packed 512 8-bit values, touching 8 512-bit words, using 512 bytes */
static void filterlt8(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  8 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(255);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 3, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_srli_epi32(w0, 24)),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(out + 4, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w1)),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 7, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_srli_epi32(w1, 24)),
                                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 11, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 24)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(out + 12, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w1)),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 24)),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w0)),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 19, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 24)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(out + 20, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w1)),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 24)),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w0)),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 27, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 24)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(out + 28, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w1)),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 24)),
                                    0xFFFFFFFF));
}

/* we packed 512 9-bit values, touching 9 512-bit words, using 576 bytes */
static void filterlt9(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  9 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(511);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 9))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                   _mm512_slli_epi32(w1, 5)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 13))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 22))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                   _mm512_slli_epi32(w0, 1)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 17))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                   _mm512_slli_epi32(w1, 6)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 21))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                   _mm512_slli_epi32(w0, 2)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                   _mm512_slli_epi32(w1, 7)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 11))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                   _mm512_slli_epi32(w0, 3)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                   _mm512_slli_epi32(w1, 8)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 19))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                   _mm512_slli_epi32(w0, 4)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 23)),
                                    0xFFFFFFFF));
}

/* we packed 512 10-bit values, touching 10 512-bit words, using 640 bytes */
static void filterlt10(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  10 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(1023);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 20))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                   _mm512_slli_epi32(w1, 2)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 18))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                   _mm512_slli_epi32(w0, 4)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                   _mm512_slli_epi32(w1, 6)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                   _mm512_slli_epi32(w0, 8)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 22)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w1)),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                   _mm512_slli_epi32(w0, 2)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                   _mm512_slli_epi32(w1, 4)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                   _mm512_slli_epi32(w0, 6)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                   _mm512_slli_epi32(w1, 8)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 22)),
                                    0xFFFFFFFF));
}

/* we packed 512 11-bit values, touching 11 512-bit words, using 704 bytes */
static void filterlt11(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  11 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(2047);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                   _mm512_slli_epi32(w1, 10)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                   _mm512_slli_epi32(w0, 9)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 13))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                   _mm512_slli_epi32(w1, 8)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 25),
                                                   _mm512_slli_epi32(w0, 7)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                   _mm512_slli_epi32(w1, 6)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 5))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 27),
                                                   _mm512_slli_epi32(w0, 5)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 17))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                   _mm512_slli_epi32(w1, 4)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 7))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 18))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                   _mm512_slli_epi32(w0, 3)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 19))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                   _mm512_slli_epi32(w1, 2)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 20))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                   _mm512_slli_epi32(w0, 1)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 21)),
                                    0xFFFFFFFF));
}

/* we packed 512 12-bit values, touching 12 512-bit words, using 768 bytes */
static void filterlt12(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  12 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(4095);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                   _mm512_slli_epi32(w1, 8)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                   _mm512_slli_epi32(w0, 4)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 7, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_srli_epi32(w0, 20)),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w1)),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                   _mm512_slli_epi32(w0, 8)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                   _mm512_slli_epi32(w1, 4)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 20)),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w0)),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                   _mm512_slli_epi32(w1, 8)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                   _mm512_slli_epi32(w0, 4)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 20)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w1)),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                   _mm512_slli_epi32(w0, 8)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                   _mm512_slli_epi32(w1, 4)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 20)),
                                    0xFFFFFFFF));
}

/* we packed 512 13-bit values, touching 13 512-bit words, using 832 bytes */
static void filterlt13(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  13 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(8191);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 13))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                   _mm512_slli_epi32(w1, 6)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 7))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                   _mm512_slli_epi32(w0, 12)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 1))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                   _mm512_slli_epi32(w1, 5)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 21),
                                                   _mm512_slli_epi32(w0, 11)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                   _mm512_slli_epi32(w1, 4)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                   _mm512_slli_epi32(w0, 10)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 3))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 29),
                                                   _mm512_slli_epi32(w1, 3)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                   _mm512_slli_epi32(w0, 9)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 17))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                   _mm512_slli_epi32(w1, 2)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 11))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                   _mm512_slli_epi32(w0, 8)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 18))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 31),
                                                   _mm512_slli_epi32(w1, 1)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 25),
                                                   _mm512_slli_epi32(w0, 7)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 19)),
                                    0xFFFFFFFF));
}

/* we packed 512 14-bit values, touching 14 512-bit words, using 896 bytes */
static void filterlt14(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  14 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(16383);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                   _mm512_slli_epi32(w1, 4)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                   _mm512_slli_epi32(w0, 8)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                   _mm512_slli_epi32(w1, 12)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                   _mm512_slli_epi32(w0, 2)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                   _mm512_slli_epi32(w1, 6)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                   _mm512_slli_epi32(w0, 10)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 18)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w1)),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                   _mm512_slli_epi32(w0, 4)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                   _mm512_slli_epi32(w1, 8)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                   _mm512_slli_epi32(w0, 12)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 16))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                   _mm512_slli_epi32(w1, 2)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                   _mm512_slli_epi32(w0, 6)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                   _mm512_slli_epi32(w1, 10)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 18)),
                                    0xFFFFFFFF));
}

/* we packed 512 15-bit values, touching 15 512-bit words, using 960 bytes */
static void filterlt15(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  15 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(32767);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 15))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                   _mm512_slli_epi32(w1, 2)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 13))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                   _mm512_slli_epi32(w0, 4)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                   _mm512_slli_epi32(w1, 6)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                   _mm512_slli_epi32(w0, 8)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                   _mm512_slli_epi32(w1, 10)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 5))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                   _mm512_slli_epi32(w0, 12)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 3))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                   _mm512_slli_epi32(w1, 14)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 16))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                   _mm512_slli_epi32(w0, 1)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 14))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 29),
                                                   _mm512_slli_epi32(w1, 3)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 27),
                                                   _mm512_slli_epi32(w0, 5)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                   _mm512_slli_epi32(w1, 7)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                   _mm512_slli_epi32(w0, 9)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                   _mm512_slli_epi32(w1, 11)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 19),
                                                   _mm512_slli_epi32(w0, 13)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 17)),
                                    0xFFFFFFFF));
}

/* we packed 512 16-bit values, touching 16 512-bit words, using 1024 bytes */
static void filterlt16(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  16 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(65535);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(out + 1, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_srli_epi32(w0, 16)),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(out + 2, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w1)),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(out + 3, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_srli_epi32(w1, 16)),
                                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(out + 4, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(out + 5, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_srli_epi32(w0, 16)),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(out + 6, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w1)),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(out + 7, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_srli_epi32(w1, 16)),
                                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  _mm512_storeu_si512(out + 9, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_srli_epi32(w0, 16)),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(out + 10, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w1)),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 11, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 16)),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(out + 12, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w0)),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 13, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 16)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(out + 14, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w1)),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 16)),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w0)),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 17, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 16)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(out + 18, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w1)),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 19, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 16)),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(out + 20, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w0)),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 21, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 16)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(out + 22, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w1)),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 16)),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w0)),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 25, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 16)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(out + 26, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w1)),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 27, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 16)),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(out + 28, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w0)),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 29, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 16)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(out + 30, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w1)),
                                    0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 16)),
                                    0xFFFFFFFF));
}

/* we packed 512 17-bit values, touching 17 512-bit words, using 1088 bytes */
static void filterlt17(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  17 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(131071);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                   _mm512_slli_epi32(w1, 15)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 19),
                                                   _mm512_slli_epi32(w0, 13)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                   _mm512_slli_epi32(w1, 11)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                   _mm512_slli_epi32(w0, 9)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                   _mm512_slli_epi32(w1, 7)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 27),
                                                   _mm512_slli_epi32(w0, 5)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 29),
                                                   _mm512_slli_epi32(w1, 3)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 14))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                   _mm512_slli_epi32(w0, 1)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                   _mm512_slli_epi32(w1, 16)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                   _mm512_slli_epi32(w0, 14)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 3))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                   _mm512_slli_epi32(w1, 12)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 5))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                   _mm512_slli_epi32(w0, 10)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                   _mm512_slli_epi32(w1, 8)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                   _mm512_slli_epi32(w0, 6)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 11))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                   _mm512_slli_epi32(w1, 4)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 13))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                   _mm512_slli_epi32(w0, 2)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 15)),
                                    0xFFFFFFFF));
}

/* we packed 512 18-bit values, touching 18 512-bit words, using 1152 bytes */
static void filterlt18(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  18 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(262143);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                   _mm512_slli_epi32(w1, 14)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                   _mm512_slli_epi32(w0, 10)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                   _mm512_slli_epi32(w1, 6)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 12))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                   _mm512_slli_epi32(w0, 2)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                   _mm512_slli_epi32(w1, 16)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                   _mm512_slli_epi32(w0, 12)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                   _mm512_slli_epi32(w1, 8)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                   _mm512_slli_epi32(w0, 4)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 14)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w1)),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                   _mm512_slli_epi32(w0, 14)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                   _mm512_slli_epi32(w1, 10)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                   _mm512_slli_epi32(w0, 6)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                   _mm512_slli_epi32(w1, 2)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                   _mm512_slli_epi32(w0, 16)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                   _mm512_slli_epi32(w1, 12)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                   _mm512_slli_epi32(w0, 8)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                   _mm512_slli_epi32(w1, 4)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 14)),
                                    0xFFFFFFFF));
}

/* we packed 512 19-bit values, touching 19 512-bit words, using 1216 bytes */
static void filterlt19(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  19 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(524287);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 19),
                                                   _mm512_slli_epi32(w1, 13)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 25),
                                                   _mm512_slli_epi32(w0, 7)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 12))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 31),
                                                   _mm512_slli_epi32(w1, 1)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                   _mm512_slli_epi32(w0, 14)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                   _mm512_slli_epi32(w1, 8)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 11))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                   _mm512_slli_epi32(w0, 2)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                   _mm512_slli_epi32(w1, 15)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                   _mm512_slli_epi32(w0, 9)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 10))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 29),
                                                   _mm512_slli_epi32(w1, 3)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                   _mm512_slli_epi32(w0, 16)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 3))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                   _mm512_slli_epi32(w1, 10)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                   _mm512_slli_epi32(w0, 4)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 15),
                                                   _mm512_slli_epi32(w1, 17)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 21),
                                                   _mm512_slli_epi32(w0, 11)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                   _mm512_slli_epi32(w1, 5)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                   _mm512_slli_epi32(w0, 18)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 1))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                   _mm512_slli_epi32(w1, 12)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 7))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                   _mm512_slli_epi32(w0, 6)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 13)),
                                    0xFFFFFFFF));
}

/* we packed 512 20-bit values, touching 20 512-bit words, using 1280 bytes */
static void filterlt20(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  20 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(1048575);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                   _mm512_slli_epi32(w1, 12)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                   _mm512_slli_epi32(w0, 4)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                   _mm512_slli_epi32(w1, 16)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                   _mm512_slli_epi32(w0, 8)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 7, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_srli_epi32(w0, 12)),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w1)),
                                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                   _mm512_slli_epi32(w0, 12)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                   _mm512_slli_epi32(w1, 4)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                   _mm512_slli_epi32(w0, 16)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                   _mm512_slli_epi32(w1, 8)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 12)),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w0)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                   _mm512_slli_epi32(w1, 12)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                   _mm512_slli_epi32(w0, 4)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                   _mm512_slli_epi32(w1, 16)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                   _mm512_slli_epi32(w0, 8)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 12)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w1)),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                   _mm512_slli_epi32(w0, 12)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                   _mm512_slli_epi32(w1, 4)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                   _mm512_slli_epi32(w0, 16)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                   _mm512_slli_epi32(w1, 8)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 12)),
                                    0xFFFFFFFF));
}

/* we packed 512 21-bit values, touching 21 512-bit words, using 1344 bytes */
static void filterlt21(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  21 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(2097151);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                   _mm512_slli_epi32(w1, 11)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 10))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                   _mm512_slli_epi32(w0, 1)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                   _mm512_slli_epi32(w1, 12)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 9))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                   _mm512_slli_epi32(w0, 2)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 19),
                                                   _mm512_slli_epi32(w1, 13)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                   _mm512_slli_epi32(w0, 3)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                   _mm512_slli_epi32(w1, 14)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 7))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                   _mm512_slli_epi32(w0, 4)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                   _mm512_slli_epi32(w1, 15)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 27),
                                                   _mm512_slli_epi32(w0, 5)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                   _mm512_slli_epi32(w1, 16)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 5))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                   _mm512_slli_epi32(w0, 6)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 15),
                                                   _mm512_slli_epi32(w1, 17)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 25),
                                                   _mm512_slli_epi32(w0, 7)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 14),
                                                   _mm512_slli_epi32(w1, 18)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                   _mm512_slli_epi32(w0, 8)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 13),
                                                   _mm512_slli_epi32(w1, 19)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                   _mm512_slli_epi32(w0, 9)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                   _mm512_slli_epi32(w1, 20)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                   _mm512_slli_epi32(w0, 10)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 11)),
                                    0xFFFFFFFF));
}

/* we packed 512 22-bit values, touching 22 512-bit words, using 1408 bytes */
static void filterlt22(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  22 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(4194303);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                   _mm512_slli_epi32(w1, 10)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                   _mm512_slli_epi32(w0, 20)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                   _mm512_slli_epi32(w1, 8)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                   _mm512_slli_epi32(w0, 18)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                   _mm512_slli_epi32(w1, 6)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                   _mm512_slli_epi32(w0, 16)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 6))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                   _mm512_slli_epi32(w1, 4)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                   _mm512_slli_epi32(w0, 14)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 8))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                   _mm512_slli_epi32(w1, 2)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                   _mm512_slli_epi32(w0, 12)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 10)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w1)),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                   _mm512_slli_epi32(w0, 10)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                   _mm512_slli_epi32(w1, 20)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                   _mm512_slli_epi32(w0, 8)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 14),
                                                   _mm512_slli_epi32(w1, 18)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                   _mm512_slli_epi32(w0, 6)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                   _mm512_slli_epi32(w1, 16)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                   _mm512_slli_epi32(w0, 4)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                   _mm512_slli_epi32(w1, 14)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                   _mm512_slli_epi32(w0, 2)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                   _mm512_slli_epi32(w1, 12)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 10)),
                                    0xFFFFFFFF));
}

/* we packed 512 23-bit values, touching 23 512-bit words, using 1472 bytes */
static void filterlt23(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  23 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(8388607);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 23),
                                                   _mm512_slli_epi32(w1, 9)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                   _mm512_slli_epi32(w0, 18)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                   _mm512_slli_epi32(w1, 4)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 19),
                                                   _mm512_slli_epi32(w0, 13)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 10),
                                                   _mm512_slli_epi32(w1, 22)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                   _mm512_slli_epi32(w0, 8)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 15),
                                                   _mm512_slli_epi32(w1, 17)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                   _mm512_slli_epi32(w0, 3)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                   _mm512_slli_epi32(w1, 12)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 11),
                                                   _mm512_slli_epi32(w0, 21)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                   _mm512_slli_epi32(w1, 7)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                   _mm512_slli_epi32(w0, 16)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 7))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                   _mm512_slli_epi32(w1, 2)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 21),
                                                   _mm512_slli_epi32(w0, 11)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                   _mm512_slli_epi32(w1, 20)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                   _mm512_slli_epi32(w0, 6)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                   _mm512_slli_epi32(w1, 15)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 8))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                   _mm512_slli_epi32(w0, 1)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                   _mm512_slli_epi32(w1, 10)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 13),
                                                   _mm512_slli_epi32(w0, 19)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                   _mm512_slli_epi32(w1, 5)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                   _mm512_slli_epi32(w0, 14)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 9)),
                                    0xFFFFFFFF));
}

/* we packed 512 24-bit values, touching 24 512-bit words, using 1536 bytes */
static void filterlt24(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  24 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(16777215);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                   _mm512_slli_epi32(w1, 8)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                   _mm512_slli_epi32(w0, 16)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 3, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(broadcomp, _mm512_srli_epi32(w0, 8)),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(out + 4, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w1)),
                                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                   _mm512_slli_epi32(w0, 8)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                   _mm512_slli_epi32(w1, 16)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(broadcomp, _mm512_srli_epi32(w1, 8)),
                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                   _mm512_slli_epi32(w1, 8)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                   _mm512_slli_epi32(w0, 16)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 11, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 8)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(out + 12, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w1)),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                   _mm512_slli_epi32(w0, 8)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                   _mm512_slli_epi32(w1, 16)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 8)),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w0)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                   _mm512_slli_epi32(w1, 8)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                   _mm512_slli_epi32(w0, 16)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 19, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 8)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(out + 20, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w1)),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                   _mm512_slli_epi32(w0, 8)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                   _mm512_slli_epi32(w1, 16)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 8)),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w0)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                   _mm512_slli_epi32(w1, 8)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                   _mm512_slli_epi32(w0, 16)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 27, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 8)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(out + 28, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w1)),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                   _mm512_slli_epi32(w0, 8)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                   _mm512_slli_epi32(w1, 16)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 8)),
                                    0xFFFFFFFF));
}

/* we packed 512 25-bit values, touching 25 512-bit words, using 1600 bytes */
static void filterlt25(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  25 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(33554431);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                   _mm512_slli_epi32(w1, 7)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                   _mm512_slli_epi32(w0, 14)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 11),
                                                   _mm512_slli_epi32(w1, 21)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                   _mm512_slli_epi32(w0, 3)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                   _mm512_slli_epi32(w1, 10)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 15),
                                                   _mm512_slli_epi32(w0, 17)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 8),
                                                   _mm512_slli_epi32(w1, 24)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                   _mm512_slli_epi32(w0, 6)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 19),
                                                   _mm512_slli_epi32(w1, 13)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                   _mm512_slli_epi32(w0, 20)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 5))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                   _mm512_slli_epi32(w1, 2)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                   _mm512_slli_epi32(w0, 9)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                   _mm512_slli_epi32(w1, 16)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 9),
                                                   _mm512_slli_epi32(w0, 23)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                   _mm512_slli_epi32(w1, 5)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                   _mm512_slli_epi32(w0, 12)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 13),
                                                   _mm512_slli_epi32(w1, 19)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 6))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                   _mm512_slli_epi32(w0, 1)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                   _mm512_slli_epi32(w1, 8)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 17),
                                                   _mm512_slli_epi32(w0, 15)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 10),
                                                   _mm512_slli_epi32(w1, 22)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                   _mm512_slli_epi32(w0, 4)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                   _mm512_slli_epi32(w1, 11)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                   _mm512_slli_epi32(w0, 18)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 7)),
                                    0xFFFFFFFF));
}

/* we packed 512 26-bit values, touching 26 512-bit words, using 1664 bytes */
static void filterlt26(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  26 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(67108863);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                   _mm512_slli_epi32(w1, 6)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                   _mm512_slli_epi32(w0, 12)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 14),
                                                   _mm512_slli_epi32(w1, 18)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 8),
                                                   _mm512_slli_epi32(w0, 24)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 2))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                   _mm512_slli_epi32(w1, 4)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                   _mm512_slli_epi32(w0, 10)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                   _mm512_slli_epi32(w1, 16)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 10),
                                                   _mm512_slli_epi32(w0, 22)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                   _mm512_slli_epi32(w1, 2)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                   _mm512_slli_epi32(w0, 8)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                   _mm512_slli_epi32(w1, 14)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                   _mm512_slli_epi32(w0, 20)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 6)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w1)),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                   _mm512_slli_epi32(w0, 6)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                   _mm512_slli_epi32(w1, 12)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                   _mm512_slli_epi32(w0, 18)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 8),
                                                   _mm512_slli_epi32(w1, 24)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                   _mm512_slli_epi32(w0, 4)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                   _mm512_slli_epi32(w1, 10)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                   _mm512_slli_epi32(w0, 16)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 10),
                                                   _mm512_slli_epi32(w1, 22)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 4))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                   _mm512_slli_epi32(w0, 2)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                   _mm512_slli_epi32(w1, 8)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                   _mm512_slli_epi32(w0, 14)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                   _mm512_slli_epi32(w1, 20)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 6)),
                                    0xFFFFFFFF));
}

/* we packed 512 27-bit values, touching 27 512-bit words, using 1728 bytes */
static void filterlt27(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  27 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(134217727);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                   _mm512_slli_epi32(w1, 5)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                   _mm512_slli_epi32(w0, 10)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                   _mm512_slli_epi32(w1, 15)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                   _mm512_slli_epi32(w0, 20)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 7),
                                                   _mm512_slli_epi32(w1, 25)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 29),
                                                   _mm512_slli_epi32(w0, 3)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                   _mm512_slli_epi32(w1, 8)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 19),
                                                   _mm512_slli_epi32(w0, 13)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 14),
                                                   _mm512_slli_epi32(w1, 18)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 9),
                                                   _mm512_slli_epi32(w0, 23)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 4))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 31),
                                                   _mm512_slli_epi32(w1, 1)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                   _mm512_slli_epi32(w0, 6)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                   _mm512_slli_epi32(w1, 11)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                   _mm512_slli_epi32(w0, 16)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 11),
                                                   _mm512_slli_epi32(w1, 21)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 6),
                                                   _mm512_slli_epi32(w0, 26)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w0, 1))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                   _mm512_slli_epi32(w1, 4)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 23),
                                                   _mm512_slli_epi32(w0, 9)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                   _mm512_slli_epi32(w1, 14)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 13),
                                                   _mm512_slli_epi32(w0, 19)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 8),
                                                   _mm512_slli_epi32(w1, 24)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 3))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                   _mm512_slli_epi32(w0, 2)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                   _mm512_slli_epi32(w1, 7)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                   _mm512_slli_epi32(w0, 12)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 15),
                                                   _mm512_slli_epi32(w1, 17)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 26);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 10),
                                                   _mm512_slli_epi32(w0, 22)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 5)),
                                    0xFFFFFFFF));
}

/* we packed 512 28-bit values, touching 28 512-bit words, using 1792 bytes */
static void filterlt28(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  28 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(268435455);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                   _mm512_slli_epi32(w1, 4)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                   _mm512_slli_epi32(w0, 8)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                   _mm512_slli_epi32(w1, 12)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                   _mm512_slli_epi32(w0, 16)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                   _mm512_slli_epi32(w1, 20)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 8),
                                                   _mm512_slli_epi32(w0, 24)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(
                   _mm512_cmpgt_epi32_mask(broadcomp, _mm512_srli_epi32(w0, 4)),
                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(out + 8, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w1)),
                                   0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                   _mm512_slli_epi32(w0, 4)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                   _mm512_slli_epi32(w1, 8)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                   _mm512_slli_epi32(w0, 12)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                   _mm512_slli_epi32(w1, 16)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                   _mm512_slli_epi32(w0, 20)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 8),
                                                   _mm512_slli_epi32(w1, 24)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 4)),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w0)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                   _mm512_slli_epi32(w1, 4)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                   _mm512_slli_epi32(w0, 8)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                   _mm512_slli_epi32(w1, 12)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                   _mm512_slli_epi32(w0, 16)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                   _mm512_slli_epi32(w1, 20)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 8),
                                                   _mm512_slli_epi32(w0, 24)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 23, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 4)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(out + 24, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w1)),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                   _mm512_slli_epi32(w0, 4)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                   _mm512_slli_epi32(w1, 8)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                   _mm512_slli_epi32(w0, 12)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                   _mm512_slli_epi32(w1, 16)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 26);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                   _mm512_slli_epi32(w0, 20)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 27);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 8),
                                                   _mm512_slli_epi32(w1, 24)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 4)),
                                    0xFFFFFFFF));
}

/* we packed 512 29-bit values, touching 29 512-bit words, using 1856 bytes */
static void filterlt29(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  29 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(536870911);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 29),
                                                   _mm512_slli_epi32(w1, 3)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                   _mm512_slli_epi32(w0, 6)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 23),
                                                   _mm512_slli_epi32(w1, 9)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                   _mm512_slli_epi32(w0, 12)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                   _mm512_slli_epi32(w1, 15)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                   _mm512_slli_epi32(w0, 18)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 11),
                                                   _mm512_slli_epi32(w1, 21)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 8),
                                                   _mm512_slli_epi32(w0, 24)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 5),
                                                   _mm512_slli_epi32(w1, 27)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 2))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 31),
                                                   _mm512_slli_epi32(w0, 1)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                   _mm512_slli_epi32(w1, 4)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 25),
                                                   _mm512_slli_epi32(w0, 7)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                   _mm512_slli_epi32(w1, 10)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 19),
                                                   _mm512_slli_epi32(w0, 13)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                   _mm512_slli_epi32(w1, 16)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 13),
                                                   _mm512_slli_epi32(w0, 19)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 10),
                                                   _mm512_slli_epi32(w1, 22)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 7),
                                                   _mm512_slli_epi32(w0, 25)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 4),
                                                   _mm512_slli_epi32(w1, 28)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(mask, _mm512_srli_epi32(w1, 1))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                   _mm512_slli_epi32(w0, 2)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                   _mm512_slli_epi32(w1, 5)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                   _mm512_slli_epi32(w0, 8)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                   _mm512_slli_epi32(w1, 11)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                   _mm512_slli_epi32(w0, 14)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 15),
                                                   _mm512_slli_epi32(w1, 17)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 26);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                   _mm512_slli_epi32(w0, 20)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 27);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 9),
                                                   _mm512_slli_epi32(w1, 23)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 28);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 6),
                                                   _mm512_slli_epi32(w0, 26)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 3)),
                                    0xFFFFFFFF));
}

/* we packed 512 30-bit values, touching 30 512-bit words, using 1920 bytes */
static void filterlt30(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  30 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(1073741823);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 30),
                                                   _mm512_slli_epi32(w1, 2)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                   _mm512_slli_epi32(w0, 4)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 26),
                                                   _mm512_slli_epi32(w1, 6)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                   _mm512_slli_epi32(w0, 8)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 22),
                                                   _mm512_slli_epi32(w1, 10)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                   _mm512_slli_epi32(w0, 12)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 18),
                                                   _mm512_slli_epi32(w1, 14)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                   _mm512_slli_epi32(w0, 16)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 14),
                                                   _mm512_slli_epi32(w1, 18)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                   _mm512_slli_epi32(w0, 20)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 10),
                                                   _mm512_slli_epi32(w1, 22)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 8),
                                                   _mm512_slli_epi32(w0, 24)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 6),
                                                   _mm512_slli_epi32(w1, 26)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 4),
                                                   _mm512_slli_epi32(w0, 28)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 15, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 2)),
                                    0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(out + 16, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_and_si512(mask, w1)),
                                    0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                   _mm512_slli_epi32(w0, 2)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 28),
                                                   _mm512_slli_epi32(w1, 4)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                   _mm512_slli_epi32(w0, 6)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 24),
                                                   _mm512_slli_epi32(w1, 8)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                   _mm512_slli_epi32(w0, 10)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 20),
                                                   _mm512_slli_epi32(w1, 12)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                   _mm512_slli_epi32(w0, 14)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 16),
                                                   _mm512_slli_epi32(w1, 16)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                   _mm512_slli_epi32(w0, 18)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 12),
                                                   _mm512_slli_epi32(w1, 20)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 26);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 10),
                                                   _mm512_slli_epi32(w0, 22)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 27);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 8),
                                                   _mm512_slli_epi32(w1, 24)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 28);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 6),
                                                   _mm512_slli_epi32(w0, 26)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 29);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 4),
                                                   _mm512_slli_epi32(w1, 28)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w1, 2)),
                                    0xFFFFFFFF));
}

/* we packed 512 31-bit values, touching 31 512-bit words, using 1984 bytes */
static void filterlt31(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  31 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i mask = _mm512_set1_epi32(2147483647);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(out + 0, _mm512_maskz_set1_epi32(
                                   _mm512_cmpgt_epi32_mask(
                                       broadcomp, _mm512_and_si512(mask, w0)),
                                   0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 31),
                                                   _mm512_slli_epi32(w1, 1)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 30),
                                                   _mm512_slli_epi32(w0, 2)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 29),
                                                   _mm512_slli_epi32(w1, 3)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 28),
                                                   _mm512_slli_epi32(w0, 4)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 5,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 27),
                                                   _mm512_slli_epi32(w1, 5)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 6,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 26),
                                                   _mm512_slli_epi32(w0, 6)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 7,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 25),
                                                   _mm512_slli_epi32(w1, 7)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 8,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 24),
                                                   _mm512_slli_epi32(w0, 8)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 9,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 23),
                                                   _mm512_slli_epi32(w1, 9)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 10,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 22),
                                                   _mm512_slli_epi32(w0, 10)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 11,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 21),
                                                   _mm512_slli_epi32(w1, 11)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 12,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 20),
                                                   _mm512_slli_epi32(w0, 12)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 13,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 19),
                                                   _mm512_slli_epi32(w1, 13)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 14,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 18),
                                                   _mm512_slli_epi32(w0, 14)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 15,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 17),
                                                   _mm512_slli_epi32(w1, 15)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 16,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 16),
                                                   _mm512_slli_epi32(w0, 16)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 17,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 15),
                                                   _mm512_slli_epi32(w1, 17)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 18,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 14),
                                                   _mm512_slli_epi32(w0, 18)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 19,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 13),
                                                   _mm512_slli_epi32(w1, 19)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 20,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 12),
                                                   _mm512_slli_epi32(w0, 20)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 21,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 11),
                                                   _mm512_slli_epi32(w1, 21)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 22,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 10),
                                                   _mm512_slli_epi32(w0, 22)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 23,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 9),
                                                   _mm512_slli_epi32(w1, 23)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 24,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 8),
                                                   _mm512_slli_epi32(w0, 24)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 25,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 7),
                                                   _mm512_slli_epi32(w1, 25)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 26);
  _mm512_storeu_si512(
      out + 26,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 6),
                                                   _mm512_slli_epi32(w0, 26)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 27);
  _mm512_storeu_si512(
      out + 27,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 5),
                                                   _mm512_slli_epi32(w1, 27)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 28);
  _mm512_storeu_si512(
      out + 28,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 4),
                                                   _mm512_slli_epi32(w0, 28)))),
          0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 29);
  _mm512_storeu_si512(
      out + 29,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w0, 3),
                                                   _mm512_slli_epi32(w1, 29)))),
          0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 30);
  _mm512_storeu_si512(
      out + 30,
      _mm512_maskz_set1_epi32(
          _mm512_cmpgt_epi32_mask(
              broadcomp, _mm512_and_si512(
                             mask, _mm512_or_si512(_mm512_srli_epi32(w1, 2),
                                                   _mm512_slli_epi32(w0, 30)))),
          0xFFFFFFFF));
  _mm512_storeu_si512(out + 31, _mm512_maskz_set1_epi32(
                                    _mm512_cmpgt_epi32_mask(
                                        broadcomp, _mm512_srli_epi32(w0, 1)),
                                    0xFFFFFFFF));
}

/* we packed 512 32-bit values, touching 32 512-bit words, using 2048 bytes */
static void filterlt32(const __m512i *in, u32 *matches, const INTEGER comp) {
  /* we are going to access  32 512-bit words */
  __m512i w0, w1;
  auto out = reinterpret_cast<__m512i *>(matches);
  const __m512i broadcomp = _mm512_set1_epi32(comp);
  w0 = _mm512_loadu_si512(in);
  _mm512_storeu_si512(
      out + 0, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w0),
                                       0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 1);
  _mm512_storeu_si512(
      out + 1, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w1),
                                       0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 2);
  _mm512_storeu_si512(
      out + 2, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w0),
                                       0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 3);
  _mm512_storeu_si512(
      out + 3, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w1),
                                       0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 4);
  _mm512_storeu_si512(
      out + 4, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w0),
                                       0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 5);
  _mm512_storeu_si512(
      out + 5, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w1),
                                       0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 6);
  _mm512_storeu_si512(
      out + 6, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w0),
                                       0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 7);
  _mm512_storeu_si512(
      out + 7, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w1),
                                       0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 8);
  _mm512_storeu_si512(
      out + 8, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w0),
                                       0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 9);
  _mm512_storeu_si512(
      out + 9, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w1),
                                       0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 10);
  _mm512_storeu_si512(
      out + 10, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w0),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 11);
  _mm512_storeu_si512(
      out + 11, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w1),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 12);
  _mm512_storeu_si512(
      out + 12, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w0),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 13);
  _mm512_storeu_si512(
      out + 13, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w1),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 14);
  _mm512_storeu_si512(
      out + 14, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w0),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 15);
  _mm512_storeu_si512(
      out + 15, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w1),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 16);
  _mm512_storeu_si512(
      out + 16, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w0),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 17);
  _mm512_storeu_si512(
      out + 17, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w1),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 18);
  _mm512_storeu_si512(
      out + 18, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w0),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 19);
  _mm512_storeu_si512(
      out + 19, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w1),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 20);
  _mm512_storeu_si512(
      out + 20, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w0),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 21);
  _mm512_storeu_si512(
      out + 21, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w1),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 22);
  _mm512_storeu_si512(
      out + 22, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w0),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 23);
  _mm512_storeu_si512(
      out + 23, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w1),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 24);
  _mm512_storeu_si512(
      out + 24, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w0),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 25);
  _mm512_storeu_si512(
      out + 25, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w1),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 26);
  _mm512_storeu_si512(
      out + 26, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w0),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 27);
  _mm512_storeu_si512(
      out + 27, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w1),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 28);
  _mm512_storeu_si512(
      out + 28, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w0),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 29);
  _mm512_storeu_si512(
      out + 29, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w1),
                                        0xFFFFFFFF));
  w0 = _mm512_loadu_si512(in + 30);
  _mm512_storeu_si512(
      out + 30, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w0),
                                        0xFFFFFFFF));
  w1 = _mm512_loadu_si512(in + 31);
  _mm512_storeu_si512(
      out + 31, _mm512_maskz_set1_epi32(_mm512_cmpgt_epi32_mask(broadcomp, w1),
                                        0xFFFFFFFF));
}

void filtereq(const __m512i *in, u32 *matches, const INTEGER comp,
              const u8 bit) {
  switch (bit) {
  case 0:
    filtereq0(in, matches, comp);
    break;
  case 1:
    filtereq1(in, matches, comp);
    break;
  case 2:
    filtereq2(in, matches, comp);
    break;
  case 3:
    filtereq3(in, matches, comp);
    break;
  case 4:
    filtereq4(in, matches, comp);
    break;
  case 5:
    filtereq5(in, matches, comp);
    break;
  case 6:
    filtereq6(in, matches, comp);
    break;
  case 7:
    filtereq7(in, matches, comp);
    break;
  case 8:
    filtereq8(in, matches, comp);
    break;
  case 9:
    filtereq9(in, matches, comp);
    break;
  case 10:
    filtereq10(in, matches, comp);
    break;
  case 11:
    filtereq11(in, matches, comp);
    break;
  case 12:
    filtereq12(in, matches, comp);
    break;
  case 13:
    filtereq13(in, matches, comp);
    break;
  case 14:
    filtereq14(in, matches, comp);
    break;
  case 15:
    filtereq15(in, matches, comp);
    break;
  case 16:
    filtereq16(in, matches, comp);
    break;
  case 17:
    filtereq17(in, matches, comp);
    break;
  case 18:
    filtereq18(in, matches, comp);
    break;
  case 19:
    filtereq19(in, matches, comp);
    break;
  case 20:
    filtereq20(in, matches, comp);
    break;
  case 21:
    filtereq21(in, matches, comp);
    break;
  case 22:
    filtereq22(in, matches, comp);
    break;
  case 23:
    filtereq23(in, matches, comp);
    break;
  case 24:
    filtereq24(in, matches, comp);
    break;
  case 25:
    filtereq25(in, matches, comp);
    break;
  case 26:
    filtereq26(in, matches, comp);
    break;
  case 27:
    filtereq27(in, matches, comp);
    break;
  case 28:
    filtereq28(in, matches, comp);
    break;
  case 29:
    filtereq29(in, matches, comp);
    break;
  case 30:
    filtereq30(in, matches, comp);
    break;
  case 31:
    filtereq31(in, matches, comp);
    break;
  case 32:
    filtereq32(in, matches, comp);
    break;
  }
}

void filterneq(const __m512i *in, u32 *matches, const INTEGER comp,
               const u8 bit) {
  switch (bit) {
  case 0:
    filterneq0(in, matches, comp);
    break;
  case 1:
    filterneq1(in, matches, comp);
    break;
  case 2:
    filterneq2(in, matches, comp);
    break;
  case 3:
    filterneq3(in, matches, comp);
    break;
  case 4:
    filterneq4(in, matches, comp);
    break;
  case 5:
    filterneq5(in, matches, comp);
    break;
  case 6:
    filterneq6(in, matches, comp);
    break;
  case 7:
    filterneq7(in, matches, comp);
    break;
  case 8:
    filterneq8(in, matches, comp);
    break;
  case 9:
    filterneq9(in, matches, comp);
    break;
  case 10:
    filterneq10(in, matches, comp);
    break;
  case 11:
    filterneq11(in, matches, comp);
    break;
  case 12:
    filterneq12(in, matches, comp);
    break;
  case 13:
    filterneq13(in, matches, comp);
    break;
  case 14:
    filterneq14(in, matches, comp);
    break;
  case 15:
    filterneq15(in, matches, comp);
    break;
  case 16:
    filterneq16(in, matches, comp);
    break;
  case 17:
    filterneq17(in, matches, comp);
    break;
  case 18:
    filterneq18(in, matches, comp);
    break;
  case 19:
    filterneq19(in, matches, comp);
    break;
  case 20:
    filterneq20(in, matches, comp);
    break;
  case 21:
    filterneq21(in, matches, comp);
    break;
  case 22:
    filterneq22(in, matches, comp);
    break;
  case 23:
    filterneq23(in, matches, comp);
    break;
  case 24:
    filterneq24(in, matches, comp);
    break;
  case 25:
    filterneq25(in, matches, comp);
    break;
  case 26:
    filterneq26(in, matches, comp);
    break;
  case 27:
    filterneq27(in, matches, comp);
    break;
  case 28:
    filterneq28(in, matches, comp);
    break;
  case 29:
    filterneq29(in, matches, comp);
    break;
  case 30:
    filterneq30(in, matches, comp);
    break;
  case 31:
    filterneq31(in, matches, comp);
    break;
  case 32:
    filterneq32(in, matches, comp);
    break;
  }
}

void filtergt(const __m512i *in, u32 *matches, const INTEGER comp,
              const u8 bit) {
  switch (bit) {
  case 0:
    filtergt0(in, matches, comp);
    break;
  case 1:
    filtergt1(in, matches, comp);
    break;
  case 2:
    filtergt2(in, matches, comp);
    break;
  case 3:
    filtergt3(in, matches, comp);
    break;
  case 4:
    filtergt4(in, matches, comp);
    break;
  case 5:
    filtergt5(in, matches, comp);
    break;
  case 6:
    filtergt6(in, matches, comp);
    break;
  case 7:
    filtergt7(in, matches, comp);
    break;
  case 8:
    filtergt8(in, matches, comp);
    break;
  case 9:
    filtergt9(in, matches, comp);
    break;
  case 10:
    filtergt10(in, matches, comp);
    break;
  case 11:
    filtergt11(in, matches, comp);
    break;
  case 12:
    filtergt12(in, matches, comp);
    break;
  case 13:
    filtergt13(in, matches, comp);
    break;
  case 14:
    filtergt14(in, matches, comp);
    break;
  case 15:
    filtergt15(in, matches, comp);
    break;
  case 16:
    filtergt16(in, matches, comp);
    break;
  case 17:
    filtergt17(in, matches, comp);
    break;
  case 18:
    filtergt18(in, matches, comp);
    break;
  case 19:
    filtergt19(in, matches, comp);
    break;
  case 20:
    filtergt20(in, matches, comp);
    break;
  case 21:
    filtergt21(in, matches, comp);
    break;
  case 22:
    filtergt22(in, matches, comp);
    break;
  case 23:
    filtergt23(in, matches, comp);
    break;
  case 24:
    filtergt24(in, matches, comp);
    break;
  case 25:
    filtergt25(in, matches, comp);
    break;
  case 26:
    filtergt26(in, matches, comp);
    break;
  case 27:
    filtergt27(in, matches, comp);
    break;
  case 28:
    filtergt28(in, matches, comp);
    break;
  case 29:
    filtergt29(in, matches, comp);
    break;
  case 30:
    filtergt30(in, matches, comp);
    break;
  case 31:
    filtergt31(in, matches, comp);
    break;
  case 32:
    filtergt32(in, matches, comp);
    break;
  }
}

void filterlt(const __m512i *in, u32 *matches, const INTEGER comp,
              const u8 bit) {
  switch (bit) {
  case 0:
    filterlt0(in, matches, comp);
    break;
  case 1:
    filterlt1(in, matches, comp);
    break;
  case 2:
    filterlt2(in, matches, comp);
    break;
  case 3:
    filterlt3(in, matches, comp);
    break;
  case 4:
    filterlt4(in, matches, comp);
    break;
  case 5:
    filterlt5(in, matches, comp);
    break;
  case 6:
    filterlt6(in, matches, comp);
    break;
  case 7:
    filterlt7(in, matches, comp);
    break;
  case 8:
    filterlt8(in, matches, comp);
    break;
  case 9:
    filterlt9(in, matches, comp);
    break;
  case 10:
    filterlt10(in, matches, comp);
    break;
  case 11:
    filterlt11(in, matches, comp);
    break;
  case 12:
    filterlt12(in, matches, comp);
    break;
  case 13:
    filterlt13(in, matches, comp);
    break;
  case 14:
    filterlt14(in, matches, comp);
    break;
  case 15:
    filterlt15(in, matches, comp);
    break;
  case 16:
    filterlt16(in, matches, comp);
    break;
  case 17:
    filterlt17(in, matches, comp);
    break;
  case 18:
    filterlt18(in, matches, comp);
    break;
  case 19:
    filterlt19(in, matches, comp);
    break;
  case 20:
    filterlt20(in, matches, comp);
    break;
  case 21:
    filterlt21(in, matches, comp);
    break;
  case 22:
    filterlt22(in, matches, comp);
    break;
  case 23:
    filterlt23(in, matches, comp);
    break;
  case 24:
    filterlt24(in, matches, comp);
    break;
  case 25:
    filterlt25(in, matches, comp);
    break;
  case 26:
    filterlt26(in, matches, comp);
    break;
  case 27:
    filterlt27(in, matches, comp);
    break;
  case 28:
    filterlt28(in, matches, comp);
    break;
  case 29:
    filterlt29(in, matches, comp);
    break;
  case 30:
    filterlt30(in, matches, comp);
    break;
  case 31:
    filterlt31(in, matches, comp);
    break;
  case 32:
    filterlt32(in, matches, comp);
    break;
  }
}

void filter(const __m512i *in, u32 *matches, const u8 bit,
            const algebra::Predicate<INTEGER> &predicate) {
  const INTEGER comp = predicate.getValue();
  switch (predicate.getType()) {
  case algebra::PredicateType::EQ:
    filtereq(in, matches, comp, bit);
    break;
  case algebra::PredicateType::INEQ:
    filterneq(in, matches, comp, bit);
    break;
  case algebra::PredicateType::GT:
    filtergt(in, matches, comp, bit);
    break;
  case algebra::PredicateType::LT:
    filterlt(in, matches, comp, bit);
    break;
  default:
    break;
  }
}

void filterfast(const __m512i *in, u8 *matches, const u8 bit,
                const algebra::Predicate<INTEGER> &predicate) {
  const INTEGER comp = predicate.getValue();
  switch (predicate.getType()) {
  case algebra::PredicateType::EQ:
    if (bit == 1)
      filterfasteq1(in, matches, comp);
    else
      assert(false);
    break;
  case algebra::PredicateType::INEQ:
    assert(false);
    break;
  case algebra::PredicateType::GT:
    assert(false);
    break;
  case algebra::PredicateType::LT:
    assert(false);
    break;
  default:
    break;
  }
}
//---------------------------------------------------------------------------
} // namespace avx512
//---------------------------------------------------------------------------
} // namespace simd32
//---------------------------------------------------------------------------
} // namespace bitpacking
//---------------------------------------------------------------------------
} // namespace compression
